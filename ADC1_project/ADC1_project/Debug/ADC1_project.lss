
ADC1_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  0000077c  00000810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000077c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080021e  0080021e  0000082e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000860  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001261  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dbe  00000000  00000000  00001bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000747  00000000  00000000  00002997  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  000030e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000652  00000000  00000000  00003304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d4  00000000  00000000  00003956  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003f2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__bad_interrupt>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	00 00       	nop
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	00 00       	nop
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	72 c0       	rjmp	.+228    	; 0x106 <__bad_interrupt>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	5f c1       	rjmp	.+702    	; 0x324 <__vector_25>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	0c c1       	rjmp	.+536    	; 0x28e <__vector_29>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3c c0       	rjmp	.+120    	; 0x106 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3a c0       	rjmp	.+116    	; 0x106 <__bad_interrupt>
  92:	00 00       	nop
  94:	38 c0       	rjmp	.+112    	; 0x106 <__bad_interrupt>
  96:	00 00       	nop
  98:	36 c0       	rjmp	.+108    	; 0x106 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	34 c0       	rjmp	.+104    	; 0x106 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	32 c0       	rjmp	.+100    	; 0x106 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	30 c0       	rjmp	.+96     	; 0x106 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2e c0       	rjmp	.+92     	; 0x106 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2c c0       	rjmp	.+88     	; 0x106 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2a c0       	rjmp	.+84     	; 0x106 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	28 c0       	rjmp	.+80     	; 0x106 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	26 c0       	rjmp	.+76     	; 0x106 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	24 c0       	rjmp	.+72     	; 0x106 <__bad_interrupt>
  be:	00 00       	nop
  c0:	22 c0       	rjmp	.+68     	; 0x106 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	20 c0       	rjmp	.+64     	; 0x106 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1e c0       	rjmp	.+60     	; 0x106 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f7 e0       	ldi	r31, 0x07	; 7
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	ae 31       	cpi	r26, 0x1E	; 30
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	ae e1       	ldi	r26, 0x1E	; 30
  f6:	b2 e0       	ldi	r27, 0x02	; 2
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	a8 32       	cpi	r26, 0x28	; 40
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	42 d1       	rcall	.+644    	; 0x388 <main>
 104:	39 c3       	rjmp	.+1650   	; 0x778 <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <fnd_write>:
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline void fnd_clear(uint8_t fnd_num)
{
    fnd_write(fnd_num, 0);
 108:	9f b7       	in	r25, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	84 bb       	out	0x14, r24	; 20
 10e:	68 b9       	out	0x08, r22	; 8
 110:	87 e0       	ldi	r24, 0x07	; 7
 112:	84 bb       	out	0x14, r24	; 20
 114:	99 23       	and	r25, r25
 116:	0c f4       	brge	.+2      	; 0x11a <fnd_write+0x12>
 118:	78 94       	sei
 11a:	08 95       	ret

0000011c <fnd_clear_all>:
/* ----------------------------------------------------------------------------
 * clear all FNDs 
 * -------------------------------------------------------------------------- */
void fnd_clear_all(void)
{
    fnd_write(0, 0);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	f3 df       	rcall	.-26     	; 0x108 <fnd_write>
    fnd_write(1, 0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	f0 df       	rcall	.-32     	; 0x108 <fnd_write>
    fnd_write(2, 0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	ed cf       	rjmp	.-38     	; 0x108 <fnd_write>
 12e:	08 95       	ret

00000130 <fnd_write_number>:
{
    static uint8_t num_code[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x6f,
                                  0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71};
    uint8_t value;
    
    value = num_code[num] | (dot_on<<7);
 130:	e6 2f       	mov	r30, r22
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	e2 5f       	subi	r30, 0xF2	; 242
 136:	fd 4f       	sbci	r31, 0xFD	; 253
    fnd_write(fnd_num, value);    
 138:	90 e8       	ldi	r25, 0x80	; 128
 13a:	49 9f       	mul	r20, r25
 13c:	a0 01       	movw	r20, r0
 13e:	11 24       	eor	r1, r1
 140:	60 81       	ld	r22, Z
 142:	64 2b       	or	r22, r20
 144:	e1 cf       	rjmp	.-62     	; 0x108 <fnd_write>
 146:	08 95       	ret

00000148 <fnd_write_numbers>:
}

void fnd_write_numbers(uint16_t num)
{
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	8c 01       	movw	r16, r24
	uint16_t a = num%10;
 152:	9c 01       	movw	r18, r24
 154:	ad ec       	ldi	r26, 0xCD	; 205
 156:	bc ec       	ldi	r27, 0xCC	; 204
 158:	74 d1       	rcall	.+744    	; 0x442 <__umulhisi3>
 15a:	fc 01       	movw	r30, r24
 15c:	f6 95       	lsr	r31
 15e:	e7 95       	ror	r30
 160:	f6 95       	lsr	r31
 162:	e7 95       	ror	r30
 164:	f6 95       	lsr	r31
 166:	e7 95       	ror	r30
 168:	cf 01       	movw	r24, r30
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e8 0f       	add	r30, r24
 17c:	f9 1f       	adc	r31, r25
 17e:	c8 01       	movw	r24, r16
 180:	8e 1b       	sub	r24, r30
 182:	9f 0b       	sbc	r25, r31
 184:	fc 01       	movw	r30, r24
	uint16_t b = (num/10)%10;
 186:	5d d1       	rcall	.+698    	; 0x442 <__umulhisi3>
 188:	ac 01       	movw	r20, r24
 18a:	56 95       	lsr	r21
 18c:	47 95       	ror	r20
 18e:	56 95       	lsr	r21
 190:	47 95       	ror	r20
 192:	56 95       	lsr	r21
 194:	47 95       	ror	r20
 196:	9a 01       	movw	r18, r20
 198:	54 d1       	rcall	.+680    	; 0x442 <__umulhisi3>
 19a:	ec 01       	movw	r28, r24
 19c:	d6 95       	lsr	r29
 19e:	c7 95       	ror	r28
 1a0:	d6 95       	lsr	r29
 1a2:	c7 95       	ror	r28
 1a4:	d6 95       	lsr	r29
 1a6:	c7 95       	ror	r28
 1a8:	ce 01       	movw	r24, r28
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	cc 0f       	add	r28, r28
 1b0:	dd 1f       	adc	r29, r29
 1b2:	cc 0f       	add	r28, r28
 1b4:	dd 1f       	adc	r29, r29
 1b6:	cc 0f       	add	r28, r28
 1b8:	dd 1f       	adc	r29, r29
 1ba:	c8 0f       	add	r28, r24
 1bc:	d9 1f       	adc	r29, r25
 1be:	ca 01       	movw	r24, r20
 1c0:	8c 1b       	sub	r24, r28
 1c2:	9d 0b       	sbc	r25, r29
 1c4:	ec 01       	movw	r28, r24
 1c6:	0a 30       	cpi	r16, 0x0A	; 10
	uint16_t c = (num/100)%10;
	
	if(num<10)
 1c8:	11 05       	cpc	r17, r1
 1ca:	58 f4       	brcc	.+22     	; 0x1e2 <fnd_write_numbers+0x9a>
 1cc:	40 e0       	ldi	r20, 0x00	; 0
	{
		fnd_write_number(0,a,0);
 1ce:	6e 2f       	mov	r22, r30
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	ae df       	rcall	.-164    	; 0x130 <fnd_write_number>
		fnd_write(1,0);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	97 df       	rcall	.-210    	; 0x108 <fnd_write>
		fnd_write(2,0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	94 df       	rcall	.-216    	; 0x108 <fnd_write>
 1e0:	3d c0       	rjmp	.+122    	; 0x25c <fnd_write_numbers+0x114>
 1e2:	04 36       	cpi	r16, 0x64	; 100
	}
	else if(num<100)
 1e4:	11 05       	cpc	r17, r1
 1e6:	60 f4       	brcc	.+24     	; 0x200 <fnd_write_numbers+0xb8>
	{
		fnd_write_number(0,a,0);
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	6e 2f       	mov	r22, r30
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	a0 df       	rcall	.-192    	; 0x130 <fnd_write_number>
		fnd_write_number(1,b,0);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	6c 2f       	mov	r22, r28
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	9c df       	rcall	.-200    	; 0x130 <fnd_write_number>
		fnd_write(2,0);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	85 df       	rcall	.-246    	; 0x108 <fnd_write>
 1fe:	2e c0       	rjmp	.+92     	; 0x25c <fnd_write_numbers+0x114>
	}
	else
	{
		fnd_write_number(0,a,0);
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	6e 2f       	mov	r22, r30
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	94 df       	rcall	.-216    	; 0x130 <fnd_write_number>
 208:	40 e0       	ldi	r20, 0x00	; 0
		fnd_write_number(1,b,0);
 20a:	6c 2f       	mov	r22, r28
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 df       	rcall	.-224    	; 0x130 <fnd_write_number>
 210:	98 01       	movw	r18, r16
		fnd_write_number(2,c,0);
 212:	36 95       	lsr	r19
 214:	27 95       	ror	r18
 216:	36 95       	lsr	r19
 218:	27 95       	ror	r18
 21a:	ab e7       	ldi	r26, 0x7B	; 123
 21c:	b4 e1       	ldi	r27, 0x14	; 20
 21e:	11 d1       	rcall	.+546    	; 0x442 <__umulhisi3>
 220:	ac 01       	movw	r20, r24
 222:	56 95       	lsr	r21
 224:	47 95       	ror	r20
 226:	9a 01       	movw	r18, r20
 228:	ad ec       	ldi	r26, 0xCD	; 205
 22a:	bc ec       	ldi	r27, 0xCC	; 204
 22c:	0a d1       	rcall	.+532    	; 0x442 <__umulhisi3>
 22e:	96 95       	lsr	r25
 230:	87 95       	ror	r24
 232:	96 95       	lsr	r25
 234:	87 95       	ror	r24
 236:	96 95       	lsr	r25
 238:	87 95       	ror	r24
 23a:	9c 01       	movw	r18, r24
 23c:	22 0f       	add	r18, r18
 23e:	33 1f       	adc	r19, r19
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	82 0f       	add	r24, r18
 24e:	93 1f       	adc	r25, r19
 250:	ba 01       	movw	r22, r20
 252:	68 1b       	sub	r22, r24
 254:	79 0b       	sbc	r23, r25
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	6a df       	rcall	.-300    	; 0x130 <fnd_write_number>
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
	}
	
}
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	08 95       	ret

00000266 <led_write>:
 266:	9f b7       	in	r25, 0x3f	; 63
 268:	f8 94       	cli
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline static void fnd_select(uint8_t fnd_num)
{
    PORTG = fnd_num;
 26a:	23 e0       	ldi	r18, 0x03	; 3
 26c:	24 bb       	out	0x14, r18	; 20
    
    sreg = SREG;            // save SREG
    cli();                  // disable interrupt to prevent shared-data problem

    fnd_select(3);
    PORTC = value;
 26e:	88 b9       	out	0x08, r24	; 8
/* ----------------------------------------------------------------------------
 * deselect selected FND
 * -------------------------------------------------------------------------- */
inline static void fnd_deselect(void)
{
    PORTG = 0x07;
 270:	87 e0       	ldi	r24, 0x07	; 7
 272:	84 bb       	out	0x14, r24	; 20

    fnd_select(3);
    PORTC = value;
    fnd_deselect();

    if(sreg&0x80)           // if global interrupt was enabled before executing cli()
 274:	99 23       	and	r25, r25
 276:	0c f4       	brge	.+2      	; 0x27a <led_write+0x14>
        sei();              // enable interrupt        
 278:	78 94       	sei
 27a:	08 95       	ret

0000027c <fnd_init>:
 * initialize port for FND/LED interface
 * -------------------------------------------------------------------------- */
inline static void fnd_port_init(void)
{
    // configure output
    DDRC = 0xff;            // PORTC[7..0]
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	87 b9       	out	0x07, r24	; 7
    DDRG = 0x07;            // PORTG[2..0]
 280:	87 e0       	ldi	r24, 0x07	; 7
 282:	83 bb       	out	0x13, r24	; 19
    DDRB |= _BV(LED_COLOR);
 284:	24 9a       	sbi	0x04, 4	; 4
 * initialize FND/LED
 * -------------------------------------------------------------------------- */
void fnd_init(void)
{
    fnd_port_init();
    fnd_clear_all();
 286:	4a df       	rcall	.-364    	; 0x11c <fnd_clear_all>
    led_write(0xff);
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	ed cf       	rjmp	.-38     	; 0x266 <led_write>
 28c:	08 95       	ret

0000028e <__vector_29>:
		adc_get_result(3);
	}
	UDR0 = UDR0;
}
ISR(ADC_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	0b b6       	in	r0, 0x3b	; 59
 29a:	0f 92       	push	r0
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
	fnd_write_numbers(ADC);
 2b4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2b8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2bc:	45 df       	rcall	.-374    	; 0x148 <fnd_write_numbers>
}
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	0f 90       	pop	r0
 2d8:	0b be       	out	0x3b, r0	; 59
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <adc_init>:
}

void adc_init(void)
{
	//ADC enable
	ADCSRA |= _BV(ADEN);
 2e4:	ea e7       	ldi	r30, 0x7A	; 122
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	80 83       	st	Z, r24
	//AD 변환 범위는 0 ~ AVCC가 되도록설정
	ADMUX |= _BV(REFS0);
 2ee:	ac e7       	ldi	r26, 0x7C	; 124
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	8c 91       	ld	r24, X
 2f4:	80 64       	ori	r24, 0x40	; 64
 2f6:	8c 93       	st	X, r24
	//ADC interrupt enable
	ADCSRA |= _BV(ADIE);
 2f8:	80 81       	ld	r24, Z
 2fa:	88 60       	ori	r24, 0x08	; 8
 2fc:	80 83       	st	Z, r24
	//ADC 50kHz ~ 200kHz 사이의 갑을 가지도록 prescaler 설정
	ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
 2fe:	80 81       	ld	r24, Z
 300:	87 60       	ori	r24, 0x07	; 7
 302:	80 83       	st	Z, r24
 304:	08 95       	ret

00000306 <adc_get_result>:
}

void adc_get_result(uint8_t channel_num)
{
	//MUX 입력을 제외한 다른 비트의 값을 보호하기 위한 설정
	ADMUX = 0xf0 & ADMUX;
 306:	ec e7       	ldi	r30, 0x7C	; 124
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	90 81       	ld	r25, Z
 30c:	90 7f       	andi	r25, 0xF0	; 240
 30e:	90 83       	st	Z, r25
	//MUX에 입력 값 넣기
	ADMUX |= 0x0f & channel_num;
 310:	90 81       	ld	r25, Z
 312:	8f 70       	andi	r24, 0x0F	; 15
 314:	98 2b       	or	r25, r24
 316:	90 83       	st	Z, r25
	//AD 변환 시작
	ADCSRA |= _BV(ADSC);
 318:	ea e7       	ldi	r30, 0x7A	; 122
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	80 64       	ori	r24, 0x40	; 64
 320:	80 83       	st	Z, r24
 322:	08 95       	ret

00000324 <__vector_25>:
void adc_init(void);
void adc_get_result(uint8_t channel_num);
void ioport_init(void);

ISR(USART0_RX_vect)
{
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	0b b6       	in	r0, 0x3b	; 59
 330:	0f 92       	push	r0
 332:	2f 93       	push	r18
 334:	3f 93       	push	r19
 336:	4f 93       	push	r20
 338:	5f 93       	push	r21
 33a:	6f 93       	push	r22
 33c:	7f 93       	push	r23
 33e:	8f 93       	push	r24
 340:	9f 93       	push	r25
 342:	af 93       	push	r26
 344:	bf 93       	push	r27
 346:	ef 93       	push	r30
 348:	ff 93       	push	r31
	if (UDR0 == 'a')
 34a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 34e:	81 36       	cpi	r24, 0x61	; 97
 350:	11 f4       	brne	.+4      	; 0x356 <__vector_25+0x32>
	{
		adc_get_result(3);
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	d8 df       	rcall	.-80     	; 0x306 <adc_get_result>
	}
	UDR0 = UDR0;
 356:	e6 ec       	ldi	r30, 0xC6	; 198
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	80 83       	st	Z, r24
}
 35e:	ff 91       	pop	r31
 360:	ef 91       	pop	r30
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	7f 91       	pop	r23
 36c:	6f 91       	pop	r22
 36e:	5f 91       	pop	r21
 370:	4f 91       	pop	r20
 372:	3f 91       	pop	r19
 374:	2f 91       	pop	r18
 376:	0f 90       	pop	r0
 378:	0b be       	out	0x3b, r0	; 59
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <ioport_init>:
	//AD 변환 끝날 때 까지 기다린다.
} 

void ioport_init(void)
{
	PORTD |= _BV(PD3);
 384:	5b 9a       	sbi	0x0b, 3	; 11
 386:	08 95       	ret

00000388 <main>:
{
	fnd_write_numbers(ADC);
}

int main(void)
{
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	28 97       	sbiw	r28, 0x08	; 8
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	f8 94       	cli
 396:	de bf       	out	0x3e, r29	; 62
 398:	0f be       	out	0x3f, r0	; 63
 39a:	cd bf       	out	0x3d, r28	; 61
	adc_init();
 39c:	a3 df       	rcall	.-186    	; 0x2e4 <adc_init>
	ioport_init();
 39e:	f2 df       	rcall	.-28     	; 0x384 <ioport_init>
	fnd_init();
 3a0:	6d df       	rcall	.-294    	; 0x27c <fnd_init>
 3a2:	25 d0       	rcall	.+74     	; 0x3ee <uart_init>
	uart_init();
 3a4:	61 e1       	ldi	r22, 0x11	; 17
 3a6:	72 e0       	ldi	r23, 0x02	; 2
	fdevopen(uart_putch, uart_getch);
 3a8:	89 e1       	ldi	r24, 0x19	; 25
 3aa:	92 e0       	ldi	r25, 0x02	; 2
 3ac:	59 d0       	rcall	.+178    	; 0x460 <fdevopen>
 3ae:	88 e0       	ldi	r24, 0x08	; 8
 3b0:	e6 e0       	ldi	r30, 0x06	; 6
	
	uint8_t i = 0;
	uint8_t led_pattern[8] = {0x81, 0xC3, 0xE7, 0xFF, 0x7E, 0x3C, 0x18, 0x00};
 3b2:	f2 e0       	ldi	r31, 0x02	; 2
 3b4:	de 01       	movw	r26, r28
 3b6:	11 96       	adiw	r26, 0x01	; 1
 3b8:	01 90       	ld	r0, Z+
 3ba:	0d 92       	st	X+, r0
 3bc:	8a 95       	dec	r24
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x30>
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	11 e0       	ldi	r17, 0x01	; 1
	ioport_init();
	fnd_init();
	uart_init();
	fdevopen(uart_putch, uart_getch);
	
	uint8_t i = 0;
 3c4:	18 0f       	add	r17, r24
	uint8_t led_pattern[8] = {0x81, 0xC3, 0xE7, 0xFF, 0x7E, 0x3C, 0x18, 0x00};
    /* Replace with your application code */
    while (1) 
    {
		led_write(led_pattern[i++%8]);
 3c6:	87 70       	andi	r24, 0x07	; 7
 3c8:	e1 e0       	ldi	r30, 0x01	; 1
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	ec 0f       	add	r30, r28
 3ce:	fd 1f       	adc	r31, r29
 3d0:	e8 0f       	add	r30, r24
 3d2:	f1 1d       	adc	r31, r1
 3d4:	80 81       	ld	r24, Z
 3d6:	47 df       	rcall	.-370    	; 0x266 <led_write>
 3d8:	2f ef       	ldi	r18, 0xFF	; 255
 3da:	84 e3       	ldi	r24, 0x34	; 52
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3dc:	9c e0       	ldi	r25, 0x0C	; 12
 3de:	21 50       	subi	r18, 0x01	; 1
 3e0:	80 40       	sbci	r24, 0x00	; 0
 3e2:	90 40       	sbci	r25, 0x00	; 0
 3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x56>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x60>
 3e8:	00 00       	nop
 3ea:	81 2f       	mov	r24, r17
 3ec:	ea cf       	rjmp	.-44     	; 0x3c2 <main+0x3a>

000003ee <uart_init>:
void uart_init(void)
{
	#define BAUDRATE 115200L
	
	//UBRR0 값 설정
	UBRR0 = (F_CPU/(8*BAUDRATE))-0.5;
 3ee:	80 e1       	ldi	r24, 0x10	; 16
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 3f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	//U2X0를 1로 설정
	UCSR0A |= _BV(U2X0);
 3fa:	e0 ec       	ldi	r30, 0xC0	; 192
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	82 60       	ori	r24, 0x02	; 2
 402:	80 83       	st	Z, r24
	//인터럽트를 활성화
	UCSR0B |= _BV(RXCIE0);
 404:	e1 ec       	ldi	r30, 0xC1	; 193
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	80 68       	ori	r24, 0x80	; 128
 40c:	80 83       	st	Z, r24
	// 송신과 수신 모두 enable
	UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
 40e:	80 81       	ld	r24, Z
 410:	88 61       	ori	r24, 0x18	; 24
 412:	80 83       	st	Z, r24
	// 송수신 데이터는 각각 8 비트, stop 비트는 1 비트, no parity
	UCSR0C |= _BV(UCSZ01) | _BV(UCSZ00);
 414:	e2 ec       	ldi	r30, 0xC2	; 194
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	86 60       	ori	r24, 0x06	; 6
 41c:	80 83       	st	Z, r24
	sei();
 41e:	78 94       	sei
 420:	08 95       	ret

00000422 <uart_getch>:
}

int8_t uart_getch(void)
{
	while(!(UCSR0A & (1<<RXC0))) ;
 422:	e0 ec       	ldi	r30, 0xC0	; 192
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	88 23       	and	r24, r24
 42a:	ec f7       	brge	.-6      	; 0x426 <uart_getch+0x4>
	return UDR0;
 42c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 430:	08 95       	ret

00000432 <uart_putch>:

void uart_putch(int8_t ch)
{
	while(!(UCSR0A & (1<<UDRE0))) ;
 432:	e0 ec       	ldi	r30, 0xC0	; 192
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	90 81       	ld	r25, Z
 438:	95 ff       	sbrs	r25, 5
 43a:	fd cf       	rjmp	.-6      	; 0x436 <uart_putch+0x4>
	UDR0 = ch;
 43c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 440:	08 95       	ret

00000442 <__umulhisi3>:
 442:	a2 9f       	mul	r26, r18
 444:	b0 01       	movw	r22, r0
 446:	b3 9f       	mul	r27, r19
 448:	c0 01       	movw	r24, r0
 44a:	a3 9f       	mul	r26, r19
 44c:	70 0d       	add	r23, r0
 44e:	81 1d       	adc	r24, r1
 450:	11 24       	eor	r1, r1
 452:	91 1d       	adc	r25, r1
 454:	b2 9f       	mul	r27, r18
 456:	70 0d       	add	r23, r0
 458:	81 1d       	adc	r24, r1
 45a:	11 24       	eor	r1, r1
 45c:	91 1d       	adc	r25, r1
 45e:	08 95       	ret

00000460 <fdevopen>:
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	00 97       	sbiw	r24, 0x00	; 0
 46a:	31 f4       	brne	.+12     	; 0x478 <fdevopen+0x18>
 46c:	61 15       	cp	r22, r1
 46e:	71 05       	cpc	r23, r1
 470:	19 f4       	brne	.+6      	; 0x478 <fdevopen+0x18>
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	39 c0       	rjmp	.+114    	; 0x4ea <fdevopen+0x8a>
 478:	8b 01       	movw	r16, r22
 47a:	ec 01       	movw	r28, r24
 47c:	6e e0       	ldi	r22, 0x0E	; 14
 47e:	70 e0       	ldi	r23, 0x00	; 0
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	37 d0       	rcall	.+110    	; 0x4f4 <calloc>
 486:	fc 01       	movw	r30, r24
 488:	89 2b       	or	r24, r25
 48a:	99 f3       	breq	.-26     	; 0x472 <fdevopen+0x12>
 48c:	80 e8       	ldi	r24, 0x80	; 128
 48e:	83 83       	std	Z+3, r24	; 0x03
 490:	01 15       	cp	r16, r1
 492:	11 05       	cpc	r17, r1
 494:	71 f0       	breq	.+28     	; 0x4b2 <fdevopen+0x52>
 496:	13 87       	std	Z+11, r17	; 0x0b
 498:	02 87       	std	Z+10, r16	; 0x0a
 49a:	81 e8       	ldi	r24, 0x81	; 129
 49c:	83 83       	std	Z+3, r24	; 0x03
 49e:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 4a2:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 4a6:	89 2b       	or	r24, r25
 4a8:	21 f4       	brne	.+8      	; 0x4b2 <fdevopen+0x52>
 4aa:	f0 93 1f 02 	sts	0x021F, r31	; 0x80021f <__data_end+0x1>
 4ae:	e0 93 1e 02 	sts	0x021E, r30	; 0x80021e <__data_end>
 4b2:	20 97       	sbiw	r28, 0x00	; 0
 4b4:	c9 f0       	breq	.+50     	; 0x4e8 <fdevopen+0x88>
 4b6:	d1 87       	std	Z+9, r29	; 0x09
 4b8:	c0 87       	std	Z+8, r28	; 0x08
 4ba:	83 81       	ldd	r24, Z+3	; 0x03
 4bc:	82 60       	ori	r24, 0x02	; 2
 4be:	83 83       	std	Z+3, r24	; 0x03
 4c0:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end+0x2>
 4c4:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <__data_end+0x3>
 4c8:	89 2b       	or	r24, r25
 4ca:	71 f4       	brne	.+28     	; 0x4e8 <fdevopen+0x88>
 4cc:	f0 93 21 02 	sts	0x0221, r31	; 0x800221 <__data_end+0x3>
 4d0:	e0 93 20 02 	sts	0x0220, r30	; 0x800220 <__data_end+0x2>
 4d4:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end+0x4>
 4d8:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <__data_end+0x5>
 4dc:	89 2b       	or	r24, r25
 4de:	21 f4       	brne	.+8      	; 0x4e8 <fdevopen+0x88>
 4e0:	f0 93 23 02 	sts	0x0223, r31	; 0x800223 <__data_end+0x5>
 4e4:	e0 93 22 02 	sts	0x0222, r30	; 0x800222 <__data_end+0x4>
 4e8:	cf 01       	movw	r24, r30
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	08 95       	ret

000004f4 <calloc>:
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	86 9f       	mul	r24, r22
 4fe:	80 01       	movw	r16, r0
 500:	87 9f       	mul	r24, r23
 502:	10 0d       	add	r17, r0
 504:	96 9f       	mul	r25, r22
 506:	10 0d       	add	r17, r0
 508:	11 24       	eor	r1, r1
 50a:	c8 01       	movw	r24, r16
 50c:	0d d0       	rcall	.+26     	; 0x528 <malloc>
 50e:	ec 01       	movw	r28, r24
 510:	00 97       	sbiw	r24, 0x00	; 0
 512:	21 f0       	breq	.+8      	; 0x51c <calloc+0x28>
 514:	a8 01       	movw	r20, r16
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	27 d1       	rcall	.+590    	; 0x76a <memset>
 51c:	ce 01       	movw	r24, r28
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	08 95       	ret

00000528 <malloc>:
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	82 30       	cpi	r24, 0x02	; 2
 532:	91 05       	cpc	r25, r1
 534:	10 f4       	brcc	.+4      	; 0x53a <malloc+0x12>
 536:	82 e0       	ldi	r24, 0x02	; 2
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <__flp>
 53e:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <__flp+0x1>
 542:	20 e0       	ldi	r18, 0x00	; 0
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	a0 e0       	ldi	r26, 0x00	; 0
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	30 97       	sbiw	r30, 0x00	; 0
 54c:	19 f1       	breq	.+70     	; 0x594 <malloc+0x6c>
 54e:	40 81       	ld	r20, Z
 550:	51 81       	ldd	r21, Z+1	; 0x01
 552:	02 81       	ldd	r16, Z+2	; 0x02
 554:	13 81       	ldd	r17, Z+3	; 0x03
 556:	48 17       	cp	r20, r24
 558:	59 07       	cpc	r21, r25
 55a:	c8 f0       	brcs	.+50     	; 0x58e <malloc+0x66>
 55c:	84 17       	cp	r24, r20
 55e:	95 07       	cpc	r25, r21
 560:	69 f4       	brne	.+26     	; 0x57c <malloc+0x54>
 562:	10 97       	sbiw	r26, 0x00	; 0
 564:	31 f0       	breq	.+12     	; 0x572 <malloc+0x4a>
 566:	12 96       	adiw	r26, 0x02	; 2
 568:	0c 93       	st	X, r16
 56a:	12 97       	sbiw	r26, 0x02	; 2
 56c:	13 96       	adiw	r26, 0x03	; 3
 56e:	1c 93       	st	X, r17
 570:	27 c0       	rjmp	.+78     	; 0x5c0 <malloc+0x98>
 572:	00 93 26 02 	sts	0x0226, r16	; 0x800226 <__flp>
 576:	10 93 27 02 	sts	0x0227, r17	; 0x800227 <__flp+0x1>
 57a:	22 c0       	rjmp	.+68     	; 0x5c0 <malloc+0x98>
 57c:	21 15       	cp	r18, r1
 57e:	31 05       	cpc	r19, r1
 580:	19 f0       	breq	.+6      	; 0x588 <malloc+0x60>
 582:	42 17       	cp	r20, r18
 584:	53 07       	cpc	r21, r19
 586:	18 f4       	brcc	.+6      	; 0x58e <malloc+0x66>
 588:	9a 01       	movw	r18, r20
 58a:	bd 01       	movw	r22, r26
 58c:	ef 01       	movw	r28, r30
 58e:	df 01       	movw	r26, r30
 590:	f8 01       	movw	r30, r16
 592:	db cf       	rjmp	.-74     	; 0x54a <malloc+0x22>
 594:	21 15       	cp	r18, r1
 596:	31 05       	cpc	r19, r1
 598:	f9 f0       	breq	.+62     	; 0x5d8 <malloc+0xb0>
 59a:	28 1b       	sub	r18, r24
 59c:	39 0b       	sbc	r19, r25
 59e:	24 30       	cpi	r18, 0x04	; 4
 5a0:	31 05       	cpc	r19, r1
 5a2:	80 f4       	brcc	.+32     	; 0x5c4 <malloc+0x9c>
 5a4:	8a 81       	ldd	r24, Y+2	; 0x02
 5a6:	9b 81       	ldd	r25, Y+3	; 0x03
 5a8:	61 15       	cp	r22, r1
 5aa:	71 05       	cpc	r23, r1
 5ac:	21 f0       	breq	.+8      	; 0x5b6 <malloc+0x8e>
 5ae:	fb 01       	movw	r30, r22
 5b0:	93 83       	std	Z+3, r25	; 0x03
 5b2:	82 83       	std	Z+2, r24	; 0x02
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <malloc+0x96>
 5b6:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <__flp+0x1>
 5ba:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__flp>
 5be:	fe 01       	movw	r30, r28
 5c0:	32 96       	adiw	r30, 0x02	; 2
 5c2:	44 c0       	rjmp	.+136    	; 0x64c <malloc+0x124>
 5c4:	fe 01       	movw	r30, r28
 5c6:	e2 0f       	add	r30, r18
 5c8:	f3 1f       	adc	r31, r19
 5ca:	81 93       	st	Z+, r24
 5cc:	91 93       	st	Z+, r25
 5ce:	22 50       	subi	r18, 0x02	; 2
 5d0:	31 09       	sbc	r19, r1
 5d2:	39 83       	std	Y+1, r19	; 0x01
 5d4:	28 83       	st	Y, r18
 5d6:	3a c0       	rjmp	.+116    	; 0x64c <malloc+0x124>
 5d8:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <__brkval>
 5dc:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <__brkval+0x1>
 5e0:	23 2b       	or	r18, r19
 5e2:	41 f4       	brne	.+16     	; 0x5f4 <malloc+0xcc>
 5e4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 5e8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 5ec:	30 93 25 02 	sts	0x0225, r19	; 0x800225 <__brkval+0x1>
 5f0:	20 93 24 02 	sts	0x0224, r18	; 0x800224 <__brkval>
 5f4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 5f8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 5fc:	21 15       	cp	r18, r1
 5fe:	31 05       	cpc	r19, r1
 600:	41 f4       	brne	.+16     	; 0x612 <malloc+0xea>
 602:	2d b7       	in	r18, 0x3d	; 61
 604:	3e b7       	in	r19, 0x3e	; 62
 606:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 60a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 60e:	24 1b       	sub	r18, r20
 610:	35 0b       	sbc	r19, r21
 612:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <__brkval>
 616:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <__brkval+0x1>
 61a:	e2 17       	cp	r30, r18
 61c:	f3 07       	cpc	r31, r19
 61e:	a0 f4       	brcc	.+40     	; 0x648 <malloc+0x120>
 620:	2e 1b       	sub	r18, r30
 622:	3f 0b       	sbc	r19, r31
 624:	28 17       	cp	r18, r24
 626:	39 07       	cpc	r19, r25
 628:	78 f0       	brcs	.+30     	; 0x648 <malloc+0x120>
 62a:	ac 01       	movw	r20, r24
 62c:	4e 5f       	subi	r20, 0xFE	; 254
 62e:	5f 4f       	sbci	r21, 0xFF	; 255
 630:	24 17       	cp	r18, r20
 632:	35 07       	cpc	r19, r21
 634:	48 f0       	brcs	.+18     	; 0x648 <malloc+0x120>
 636:	4e 0f       	add	r20, r30
 638:	5f 1f       	adc	r21, r31
 63a:	50 93 25 02 	sts	0x0225, r21	; 0x800225 <__brkval+0x1>
 63e:	40 93 24 02 	sts	0x0224, r20	; 0x800224 <__brkval>
 642:	81 93       	st	Z+, r24
 644:	91 93       	st	Z+, r25
 646:	02 c0       	rjmp	.+4      	; 0x64c <malloc+0x124>
 648:	e0 e0       	ldi	r30, 0x00	; 0
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	cf 01       	movw	r24, r30
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	1f 91       	pop	r17
 654:	0f 91       	pop	r16
 656:	08 95       	ret

00000658 <free>:
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
 65c:	00 97       	sbiw	r24, 0x00	; 0
 65e:	09 f4       	brne	.+2      	; 0x662 <free+0xa>
 660:	81 c0       	rjmp	.+258    	; 0x764 <free+0x10c>
 662:	fc 01       	movw	r30, r24
 664:	32 97       	sbiw	r30, 0x02	; 2
 666:	13 82       	std	Z+3, r1	; 0x03
 668:	12 82       	std	Z+2, r1	; 0x02
 66a:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <__flp>
 66e:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <__flp+0x1>
 672:	10 97       	sbiw	r26, 0x00	; 0
 674:	81 f4       	brne	.+32     	; 0x696 <free+0x3e>
 676:	20 81       	ld	r18, Z
 678:	31 81       	ldd	r19, Z+1	; 0x01
 67a:	82 0f       	add	r24, r18
 67c:	93 1f       	adc	r25, r19
 67e:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <__brkval>
 682:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <__brkval+0x1>
 686:	28 17       	cp	r18, r24
 688:	39 07       	cpc	r19, r25
 68a:	51 f5       	brne	.+84     	; 0x6e0 <free+0x88>
 68c:	f0 93 25 02 	sts	0x0225, r31	; 0x800225 <__brkval+0x1>
 690:	e0 93 24 02 	sts	0x0224, r30	; 0x800224 <__brkval>
 694:	67 c0       	rjmp	.+206    	; 0x764 <free+0x10c>
 696:	ed 01       	movw	r28, r26
 698:	20 e0       	ldi	r18, 0x00	; 0
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	ce 17       	cp	r28, r30
 69e:	df 07       	cpc	r29, r31
 6a0:	40 f4       	brcc	.+16     	; 0x6b2 <free+0x5a>
 6a2:	4a 81       	ldd	r20, Y+2	; 0x02
 6a4:	5b 81       	ldd	r21, Y+3	; 0x03
 6a6:	9e 01       	movw	r18, r28
 6a8:	41 15       	cp	r20, r1
 6aa:	51 05       	cpc	r21, r1
 6ac:	f1 f0       	breq	.+60     	; 0x6ea <free+0x92>
 6ae:	ea 01       	movw	r28, r20
 6b0:	f5 cf       	rjmp	.-22     	; 0x69c <free+0x44>
 6b2:	d3 83       	std	Z+3, r29	; 0x03
 6b4:	c2 83       	std	Z+2, r28	; 0x02
 6b6:	40 81       	ld	r20, Z
 6b8:	51 81       	ldd	r21, Z+1	; 0x01
 6ba:	84 0f       	add	r24, r20
 6bc:	95 1f       	adc	r25, r21
 6be:	c8 17       	cp	r28, r24
 6c0:	d9 07       	cpc	r29, r25
 6c2:	59 f4       	brne	.+22     	; 0x6da <free+0x82>
 6c4:	88 81       	ld	r24, Y
 6c6:	99 81       	ldd	r25, Y+1	; 0x01
 6c8:	84 0f       	add	r24, r20
 6ca:	95 1f       	adc	r25, r21
 6cc:	02 96       	adiw	r24, 0x02	; 2
 6ce:	91 83       	std	Z+1, r25	; 0x01
 6d0:	80 83       	st	Z, r24
 6d2:	8a 81       	ldd	r24, Y+2	; 0x02
 6d4:	9b 81       	ldd	r25, Y+3	; 0x03
 6d6:	93 83       	std	Z+3, r25	; 0x03
 6d8:	82 83       	std	Z+2, r24	; 0x02
 6da:	21 15       	cp	r18, r1
 6dc:	31 05       	cpc	r19, r1
 6de:	29 f4       	brne	.+10     	; 0x6ea <free+0x92>
 6e0:	f0 93 27 02 	sts	0x0227, r31	; 0x800227 <__flp+0x1>
 6e4:	e0 93 26 02 	sts	0x0226, r30	; 0x800226 <__flp>
 6e8:	3d c0       	rjmp	.+122    	; 0x764 <free+0x10c>
 6ea:	e9 01       	movw	r28, r18
 6ec:	fb 83       	std	Y+3, r31	; 0x03
 6ee:	ea 83       	std	Y+2, r30	; 0x02
 6f0:	49 91       	ld	r20, Y+
 6f2:	59 91       	ld	r21, Y+
 6f4:	c4 0f       	add	r28, r20
 6f6:	d5 1f       	adc	r29, r21
 6f8:	ec 17       	cp	r30, r28
 6fa:	fd 07       	cpc	r31, r29
 6fc:	61 f4       	brne	.+24     	; 0x716 <free+0xbe>
 6fe:	80 81       	ld	r24, Z
 700:	91 81       	ldd	r25, Z+1	; 0x01
 702:	84 0f       	add	r24, r20
 704:	95 1f       	adc	r25, r21
 706:	02 96       	adiw	r24, 0x02	; 2
 708:	e9 01       	movw	r28, r18
 70a:	99 83       	std	Y+1, r25	; 0x01
 70c:	88 83       	st	Y, r24
 70e:	82 81       	ldd	r24, Z+2	; 0x02
 710:	93 81       	ldd	r25, Z+3	; 0x03
 712:	9b 83       	std	Y+3, r25	; 0x03
 714:	8a 83       	std	Y+2, r24	; 0x02
 716:	e0 e0       	ldi	r30, 0x00	; 0
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	12 96       	adiw	r26, 0x02	; 2
 71c:	8d 91       	ld	r24, X+
 71e:	9c 91       	ld	r25, X
 720:	13 97       	sbiw	r26, 0x03	; 3
 722:	00 97       	sbiw	r24, 0x00	; 0
 724:	19 f0       	breq	.+6      	; 0x72c <free+0xd4>
 726:	fd 01       	movw	r30, r26
 728:	dc 01       	movw	r26, r24
 72a:	f7 cf       	rjmp	.-18     	; 0x71a <free+0xc2>
 72c:	8d 91       	ld	r24, X+
 72e:	9c 91       	ld	r25, X
 730:	11 97       	sbiw	r26, 0x01	; 1
 732:	9d 01       	movw	r18, r26
 734:	2e 5f       	subi	r18, 0xFE	; 254
 736:	3f 4f       	sbci	r19, 0xFF	; 255
 738:	82 0f       	add	r24, r18
 73a:	93 1f       	adc	r25, r19
 73c:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <__brkval>
 740:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <__brkval+0x1>
 744:	28 17       	cp	r18, r24
 746:	39 07       	cpc	r19, r25
 748:	69 f4       	brne	.+26     	; 0x764 <free+0x10c>
 74a:	30 97       	sbiw	r30, 0x00	; 0
 74c:	29 f4       	brne	.+10     	; 0x758 <free+0x100>
 74e:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <__flp+0x1>
 752:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <__flp>
 756:	02 c0       	rjmp	.+4      	; 0x75c <free+0x104>
 758:	13 82       	std	Z+3, r1	; 0x03
 75a:	12 82       	std	Z+2, r1	; 0x02
 75c:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <__brkval+0x1>
 760:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <__brkval>
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	08 95       	ret

0000076a <memset>:
 76a:	dc 01       	movw	r26, r24
 76c:	01 c0       	rjmp	.+2      	; 0x770 <memset+0x6>
 76e:	6d 93       	st	X+, r22
 770:	41 50       	subi	r20, 0x01	; 1
 772:	50 40       	sbci	r21, 0x00	; 0
 774:	e0 f7       	brcc	.-8      	; 0x76e <memset+0x4>
 776:	08 95       	ret

00000778 <_exit>:
 778:	f8 94       	cli

0000077a <__stop_program>:
 77a:	ff cf       	rjmp	.-2      	; 0x77a <__stop_program>
