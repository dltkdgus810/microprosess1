
7-segmant_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  00000366  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000366  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000109c  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c59  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d9  00000000  00000000  000021d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  000027b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000606  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f2  00000000  00000000  00002ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	78 c0       	rjmp	.+240    	; 0xf6 <__bad_interrupt>
   6:	00 00       	nop
   8:	76 c0       	rjmp	.+236    	; 0xf6 <__bad_interrupt>
   a:	00 00       	nop
   c:	74 c0       	rjmp	.+232    	; 0xf6 <__bad_interrupt>
   e:	00 00       	nop
  10:	72 c0       	rjmp	.+228    	; 0xf6 <__bad_interrupt>
  12:	00 00       	nop
  14:	70 c0       	rjmp	.+224    	; 0xf6 <__bad_interrupt>
  16:	00 00       	nop
  18:	6e c0       	rjmp	.+220    	; 0xf6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6c c0       	rjmp	.+216    	; 0xf6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6a c0       	rjmp	.+212    	; 0xf6 <__bad_interrupt>
  22:	00 00       	nop
  24:	68 c0       	rjmp	.+208    	; 0xf6 <__bad_interrupt>
  26:	00 00       	nop
  28:	66 c0       	rjmp	.+204    	; 0xf6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	64 c0       	rjmp	.+200    	; 0xf6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	62 c0       	rjmp	.+196    	; 0xf6 <__bad_interrupt>
  32:	00 00       	nop
  34:	60 c0       	rjmp	.+192    	; 0xf6 <__bad_interrupt>
  36:	00 00       	nop
  38:	5e c0       	rjmp	.+188    	; 0xf6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5c c0       	rjmp	.+184    	; 0xf6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5a c0       	rjmp	.+180    	; 0xf6 <__bad_interrupt>
  42:	00 00       	nop
  44:	58 c0       	rjmp	.+176    	; 0xf6 <__bad_interrupt>
  46:	00 00       	nop
  48:	56 c0       	rjmp	.+172    	; 0xf6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	54 c0       	rjmp	.+168    	; 0xf6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	52 c0       	rjmp	.+164    	; 0xf6 <__bad_interrupt>
  52:	00 00       	nop
  54:	50 c0       	rjmp	.+160    	; 0xf6 <__bad_interrupt>
  56:	00 00       	nop
  58:	4e c0       	rjmp	.+156    	; 0xf6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4c c0       	rjmp	.+152    	; 0xf6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4a c0       	rjmp	.+148    	; 0xf6 <__bad_interrupt>
  62:	00 00       	nop
  64:	48 c0       	rjmp	.+144    	; 0xf6 <__bad_interrupt>
  66:	00 00       	nop
  68:	46 c0       	rjmp	.+140    	; 0xf6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	44 c0       	rjmp	.+136    	; 0xf6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	42 c0       	rjmp	.+132    	; 0xf6 <__bad_interrupt>
  72:	00 00       	nop
  74:	40 c0       	rjmp	.+128    	; 0xf6 <__bad_interrupt>
  76:	00 00       	nop
  78:	3e c0       	rjmp	.+124    	; 0xf6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3c c0       	rjmp	.+120    	; 0xf6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3a c0       	rjmp	.+116    	; 0xf6 <__bad_interrupt>
  82:	00 00       	nop
  84:	38 c0       	rjmp	.+112    	; 0xf6 <__bad_interrupt>
  86:	00 00       	nop
  88:	36 c0       	rjmp	.+108    	; 0xf6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	34 c0       	rjmp	.+104    	; 0xf6 <__bad_interrupt>
  8e:	00 00       	nop
  90:	32 c0       	rjmp	.+100    	; 0xf6 <__bad_interrupt>
  92:	00 00       	nop
  94:	30 c0       	rjmp	.+96     	; 0xf6 <__bad_interrupt>
  96:	00 00       	nop
  98:	2e c0       	rjmp	.+92     	; 0xf6 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2c c0       	rjmp	.+88     	; 0xf6 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2a c0       	rjmp	.+84     	; 0xf6 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	28 c0       	rjmp	.+80     	; 0xf6 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	26 c0       	rjmp	.+76     	; 0xf6 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	24 c0       	rjmp	.+72     	; 0xf6 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	22 c0       	rjmp	.+68     	; 0xf6 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	20 c0       	rjmp	.+64     	; 0xf6 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1e c0       	rjmp	.+60     	; 0xf6 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1c c0       	rjmp	.+56     	; 0xf6 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1a c0       	rjmp	.+52     	; 0xf6 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	18 c0       	rjmp	.+48     	; 0xf6 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	16 c0       	rjmp	.+44     	; 0xf6 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	e6 e6       	ldi	r30, 0x66	; 102
  e0:	f3 e0       	ldi	r31, 0x03	; 3
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a2 31       	cpi	r26, 0x12	; 18
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>
  f2:	ed d0       	rcall	.+474    	; 0x2ce <main>
  f4:	36 c1       	rjmp	.+620    	; 0x362 <_exit>

000000f6 <__bad_interrupt>:
  f6:	84 cf       	rjmp	.-248    	; 0x0 <__vectors>

000000f8 <fnd_write>:
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline void fnd_clear(uint8_t fnd_num)
{
    fnd_write(fnd_num, 0);
  f8:	9f b7       	in	r25, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	84 bb       	out	0x14, r24	; 20
  fe:	68 b9       	out	0x08, r22	; 8
 100:	87 e0       	ldi	r24, 0x07	; 7
 102:	84 bb       	out	0x14, r24	; 20
 104:	99 23       	and	r25, r25
 106:	0c f4       	brge	.+2      	; 0x10a <fnd_write+0x12>
 108:	78 94       	sei
 10a:	08 95       	ret

0000010c <fnd_clear_all>:
/* ----------------------------------------------------------------------------
 * clear all FNDs 
 * -------------------------------------------------------------------------- */
void fnd_clear_all(void)
{
    fnd_write(0, 0);
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	f3 df       	rcall	.-26     	; 0xf8 <fnd_write>
    fnd_write(1, 0);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	f0 df       	rcall	.-32     	; 0xf8 <fnd_write>
    fnd_write(2, 0);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	ed cf       	rjmp	.-38     	; 0xf8 <fnd_write>
 11e:	08 95       	ret

00000120 <fnd_write_number>:
{
    static uint8_t num_code[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x6f,
                                  0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71};
    uint8_t value;
    
    value = num_code[num] | (dot_on<<7);
 120:	e6 2f       	mov	r30, r22
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	ee 5f       	subi	r30, 0xFE	; 254
 126:	fd 4f       	sbci	r31, 0xFD	; 253
    fnd_write(fnd_num, value);    
 128:	90 e8       	ldi	r25, 0x80	; 128
 12a:	49 9f       	mul	r20, r25
 12c:	a0 01       	movw	r20, r0
 12e:	11 24       	eor	r1, r1
 130:	60 81       	ld	r22, Z
 132:	64 2b       	or	r22, r20
 134:	e1 cf       	rjmp	.-62     	; 0xf8 <fnd_write>
 136:	08 95       	ret

00000138 <fnd_write_numbers>:
}

void fnd_write_numbers(uint16_t num)
{
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	8c 01       	movw	r16, r24
	uint16_t a = num%10;
 142:	9c 01       	movw	r18, r24
 144:	ad ec       	ldi	r26, 0xCD	; 205
 146:	bc ec       	ldi	r27, 0xCC	; 204
 148:	fd d0       	rcall	.+506    	; 0x344 <__umulhisi3>
 14a:	fc 01       	movw	r30, r24
 14c:	f6 95       	lsr	r31
 14e:	e7 95       	ror	r30
 150:	f6 95       	lsr	r31
 152:	e7 95       	ror	r30
 154:	f6 95       	lsr	r31
 156:	e7 95       	ror	r30
 158:	cf 01       	movw	r24, r30
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	ee 0f       	add	r30, r30
 168:	ff 1f       	adc	r31, r31
 16a:	e8 0f       	add	r30, r24
 16c:	f9 1f       	adc	r31, r25
 16e:	c8 01       	movw	r24, r16
 170:	8e 1b       	sub	r24, r30
 172:	9f 0b       	sbc	r25, r31
 174:	fc 01       	movw	r30, r24
	uint16_t b = (num/10)%10;
 176:	e6 d0       	rcall	.+460    	; 0x344 <__umulhisi3>
 178:	ac 01       	movw	r20, r24
 17a:	56 95       	lsr	r21
 17c:	47 95       	ror	r20
 17e:	56 95       	lsr	r21
 180:	47 95       	ror	r20
 182:	56 95       	lsr	r21
 184:	47 95       	ror	r20
 186:	9a 01       	movw	r18, r20
 188:	dd d0       	rcall	.+442    	; 0x344 <__umulhisi3>
 18a:	ec 01       	movw	r28, r24
 18c:	d6 95       	lsr	r29
 18e:	c7 95       	ror	r28
 190:	d6 95       	lsr	r29
 192:	c7 95       	ror	r28
 194:	d6 95       	lsr	r29
 196:	c7 95       	ror	r28
 198:	ce 01       	movw	r24, r28
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	cc 0f       	add	r28, r28
 1a0:	dd 1f       	adc	r29, r29
 1a2:	cc 0f       	add	r28, r28
 1a4:	dd 1f       	adc	r29, r29
 1a6:	cc 0f       	add	r28, r28
 1a8:	dd 1f       	adc	r29, r29
 1aa:	c8 0f       	add	r28, r24
 1ac:	d9 1f       	adc	r29, r25
 1ae:	ca 01       	movw	r24, r20
 1b0:	8c 1b       	sub	r24, r28
 1b2:	9d 0b       	sbc	r25, r29
 1b4:	ec 01       	movw	r28, r24
 1b6:	0a 30       	cpi	r16, 0x0A	; 10
	uint16_t c = (num/100)%10;
	
	if(num<10)
 1b8:	11 05       	cpc	r17, r1
 1ba:	58 f4       	brcc	.+22     	; 0x1d2 <fnd_write_numbers+0x9a>
 1bc:	40 e0       	ldi	r20, 0x00	; 0
	{
		fnd_write_number(0,a,0);
 1be:	6e 2f       	mov	r22, r30
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	ae df       	rcall	.-164    	; 0x120 <fnd_write_number>
		fnd_write(1,0);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	97 df       	rcall	.-210    	; 0xf8 <fnd_write>
		fnd_write(2,0);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	94 df       	rcall	.-216    	; 0xf8 <fnd_write>
 1d0:	3d c0       	rjmp	.+122    	; 0x24c <fnd_write_numbers+0x114>
 1d2:	04 36       	cpi	r16, 0x64	; 100
	}
	else if(num<100)
 1d4:	11 05       	cpc	r17, r1
 1d6:	60 f4       	brcc	.+24     	; 0x1f0 <fnd_write_numbers+0xb8>
	{
		fnd_write_number(0,a,0);
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	6e 2f       	mov	r22, r30
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	a0 df       	rcall	.-192    	; 0x120 <fnd_write_number>
		fnd_write_number(1,b,0);
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	6c 2f       	mov	r22, r28
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	9c df       	rcall	.-200    	; 0x120 <fnd_write_number>
		fnd_write(2,0);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	85 df       	rcall	.-246    	; 0xf8 <fnd_write>
 1ee:	2e c0       	rjmp	.+92     	; 0x24c <fnd_write_numbers+0x114>
	}
	else
	{
		fnd_write_number(0,a,0);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	6e 2f       	mov	r22, r30
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	94 df       	rcall	.-216    	; 0x120 <fnd_write_number>
 1f8:	40 e0       	ldi	r20, 0x00	; 0
		fnd_write_number(1,b,0);
 1fa:	6c 2f       	mov	r22, r28
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 df       	rcall	.-224    	; 0x120 <fnd_write_number>
 200:	98 01       	movw	r18, r16
		fnd_write_number(2,c,0);
 202:	36 95       	lsr	r19
 204:	27 95       	ror	r18
 206:	36 95       	lsr	r19
 208:	27 95       	ror	r18
 20a:	ab e7       	ldi	r26, 0x7B	; 123
 20c:	b4 e1       	ldi	r27, 0x14	; 20
 20e:	9a d0       	rcall	.+308    	; 0x344 <__umulhisi3>
 210:	ac 01       	movw	r20, r24
 212:	56 95       	lsr	r21
 214:	47 95       	ror	r20
 216:	9a 01       	movw	r18, r20
 218:	ad ec       	ldi	r26, 0xCD	; 205
 21a:	bc ec       	ldi	r27, 0xCC	; 204
 21c:	93 d0       	rcall	.+294    	; 0x344 <__umulhisi3>
 21e:	96 95       	lsr	r25
 220:	87 95       	ror	r24
 222:	96 95       	lsr	r25
 224:	87 95       	ror	r24
 226:	96 95       	lsr	r25
 228:	87 95       	ror	r24
 22a:	9c 01       	movw	r18, r24
 22c:	22 0f       	add	r18, r18
 22e:	33 1f       	adc	r19, r19
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	82 0f       	add	r24, r18
 23e:	93 1f       	adc	r25, r19
 240:	ba 01       	movw	r22, r20
 242:	68 1b       	sub	r22, r24
 244:	79 0b       	sbc	r23, r25
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	6a df       	rcall	.-300    	; 0x120 <fnd_write_number>
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
	}
	
}
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <led_write>:
 256:	9f b7       	in	r25, 0x3f	; 63
 258:	f8 94       	cli
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline static void fnd_select(uint8_t fnd_num)
{
    PORTG = fnd_num;
 25a:	23 e0       	ldi	r18, 0x03	; 3
 25c:	24 bb       	out	0x14, r18	; 20
    
    sreg = SREG;            // save SREG
    cli();                  // disable interrupt to prevent shared-data problem

    fnd_select(3);
    PORTC = value;
 25e:	88 b9       	out	0x08, r24	; 8
/* ----------------------------------------------------------------------------
 * deselect selected FND
 * -------------------------------------------------------------------------- */
inline static void fnd_deselect(void)
{
    PORTG = 0x07;
 260:	87 e0       	ldi	r24, 0x07	; 7
 262:	84 bb       	out	0x14, r24	; 20

    fnd_select(3);
    PORTC = value;
    fnd_deselect();

    if(sreg&0x80)           // if global interrupt was enabled before executing cli()
 264:	99 23       	and	r25, r25
 266:	0c f4       	brge	.+2      	; 0x26a <led_write+0x14>
        sei();              // enable interrupt        
 268:	78 94       	sei
 26a:	08 95       	ret

0000026c <fnd_init>:
 * initialize port for FND/LED interface
 * -------------------------------------------------------------------------- */
inline static void fnd_port_init(void)
{
    // configure output
    DDRC = 0xff;            // PORTC[7..0]
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	87 b9       	out	0x07, r24	; 7
    DDRG = 0x07;            // PORTG[2..0]
 270:	87 e0       	ldi	r24, 0x07	; 7
 272:	83 bb       	out	0x13, r24	; 19
    DDRB |= _BV(LED_COLOR);
 274:	24 9a       	sbi	0x04, 4	; 4
 * initialize FND/LED
 * -------------------------------------------------------------------------- */
void fnd_init(void)
{
    fnd_port_init();
    fnd_clear_all();
 276:	4a df       	rcall	.-364    	; 0x10c <fnd_clear_all>
    led_write(0xff);
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	ed cf       	rjmp	.-38     	; 0x256 <led_write>
 27c:	08 95       	ret

0000027e <switch_hit>:
uint8_t switch_hit(void)
{
	static uint8_t prev_state = _BV(SW2);
	uint8_t cur_state;
	
	cur_state = PINE & _BV(SW2);
 27e:	9c b1       	in	r25, 0x0c	; 12
 280:	90 78       	andi	r25, 0x80	; 128
	if(prev_state != cur_state)
 282:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <prev_state.1760>
 286:	98 17       	cp	r25, r24
 288:	39 f0       	breq	.+14     	; 0x298 <switch_hit+0x1a>
	{
		prev_state = cur_state;
 28a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <prev_state.1760>
		if(!cur_state) return 1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	99 23       	and	r25, r25
 292:	19 f0       	breq	.+6      	; 0x29a <switch_hit+0x1c>
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	08 95       	ret
		else return 0;
	}
	else
	return 0;
 298:	80 e0       	ldi	r24, 0x00	; 0
}
 29a:	08 95       	ret

0000029c <switch_hit2>:
uint8_t switch_hit2(void)
{
	static uint8_t prev_state2 = _BV(SW3);
	uint8_t cur_state2;
	
	cur_state2 = PIND & _BV(SW3);
 29c:	99 b1       	in	r25, 0x09	; 9
 29e:	98 70       	andi	r25, 0x08	; 8
	if(prev_state2 != cur_state2)
 2a0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 2a4:	98 17       	cp	r25, r24
 2a6:	39 f0       	breq	.+14     	; 0x2b6 <switch_hit2+0x1a>
	{
		prev_state2 = cur_state2;
 2a8:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__data_start>
		if(!cur_state2) return 1;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	99 23       	and	r25, r25
 2b0:	19 f0       	breq	.+6      	; 0x2b8 <switch_hit2+0x1c>
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	08 95       	ret
		else return 0;
	}
	else
	return 0;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
}
 2b8:	08 95       	ret

000002ba <ioport_init>:

void ioport_init(void)
{
	//DDRC의 하위 4bit을 출력하는 단자로 만든다.
	DDRC = _BV(LED1) | _BV(LED2) | _BV(LED3) | _BV(LED4);
 2ba:	8f e0       	ldi	r24, 0x0F	; 15
 2bc:	87 b9       	out	0x07, r24	; 7
	//MCU의 LED보드 4개의 불을 끈다.
	PORTC = 0xff;
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	88 b9       	out	0x08, r24	; 8
	//MCU 보드의 SW2의 내부 pull-up저항을 활성화 한다.
	PORTE = _BV(SW2);
 2c2:	80 e8       	ldi	r24, 0x80	; 128
 2c4:	8e b9       	out	0x0e, r24	; 14
	//확장 보드의 SW3,4,5의 내부 pull-up저항을 활성화 한다.
	PORTD |= _BV(SW3) | _BV(SW4) |_BV(SW5);
 2c6:	8b b1       	in	r24, 0x0b	; 11
 2c8:	88 63       	ori	r24, 0x38	; 56
 2ca:	8b b9       	out	0x0b, r24	; 11
 2cc:	08 95       	ret

000002ce <main>:
void ioport_init(void);

int main(void)
{
	// initialize on-chip pheriperals
	ioport_init(); // initialize gpio
 2ce:	f5 df       	rcall	.-22     	; 0x2ba <ioport_init>

	// initialize extension board pheriperals
	fnd_init(); // initialize FNDs and LEDs
 2d0:	cd df       	rcall	.-102    	; 0x26c <fnd_init>
	
	//7-segment LED옆의 작은 LED의 불을 다 킨다.
	led_write(255);
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	c0 df       	rcall	.-128    	; 0x256 <led_write>
 2d6:	c1 e0       	ldi	r28, 0x01	; 1
	
	uint16_t i = 0;
 2d8:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t a = 1;
	
	while(1)
	{
		//sw2 스위치를 눌렀는지 확인한다.
		a += switch_hit();
 2da:	10 e0       	ldi	r17, 0x00	; 0
 2dc:	d0 df       	rcall	.-96     	; 0x27e <switch_hit>
 2de:	c8 0f       	add	r28, r24
		//sw3 스위치를 눌렀으면 0으로 초기화한다.
		if (switch_hit2()==1)
 2e0:	dd df       	rcall	.-70     	; 0x29c <switch_hit2>
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	51 f1       	breq	.+84     	; 0x33a <main+0x6c>
 2e6:	c0 ff       	sbrs	r28, 0
		{
			i=0;
		}
		
		if (a%2)
 2e8:	16 c0       	rjmp	.+44     	; 0x316 <main+0x48>
 2ea:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	81 ee       	ldi	r24, 0xE1	; 225
 2ee:	94 e0       	ldi	r25, 0x04	; 4
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	80 40       	sbci	r24, 0x00	; 0
 2f4:	90 40       	sbci	r25, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <main+0x22>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0x2c>
 2fa:	00 00       	nop
		{
			//0.1초의 딜레이 추가
			_delay_ms(100);
			//i의 값에 따라 7-segment LED를 조정한다.
			fnd_write_numbers(i);
 2fc:	c8 01       	movw	r24, r16
 2fe:	1c df       	rcall	.-456    	; 0x138 <fnd_write_numbers>
 300:	0f 5f       	subi	r16, 0xFF	; 255
			i++;
 302:	1f 4f       	sbci	r17, 0xFF	; 255
 304:	07 3e       	cpi	r16, 0xE7	; 231
			//i가 999가 되면 0으로 초기화
			if (i==999)
 306:	23 e0       	ldi	r18, 0x03	; 3
 308:	12 07       	cpc	r17, r18
 30a:	11 f4       	brne	.+4      	; 0x310 <main+0x42>
			{
				i = 0;
 30c:	00 e0       	ldi	r16, 0x00	; 0
			}
			//sw2 스위치를 눌러 작동할 때 확장 보드의 LED를 킨다.
			led_write(255);
 30e:	10 e0       	ldi	r17, 0x00	; 0
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	a1 df       	rcall	.-190    	; 0x256 <led_write>
 314:	e3 cf       	rjmp	.-58     	; 0x2dc <main+0xe>
		}
		//sw2 스위치를 눌러 멈췄을 때 확장 보드의 LED를 끈다.
		else
		{
			led_write(0);
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	9e df       	rcall	.-196    	; 0x256 <led_write>
 31a:	e0 cf       	rjmp	.-64     	; 0x2dc <main+0xe>
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	91 ee       	ldi	r25, 0xE1	; 225
 320:	24 e0       	ldi	r18, 0x04	; 4
 322:	81 50       	subi	r24, 0x01	; 1
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	20 40       	sbci	r18, 0x00	; 0
 328:	e1 f7       	brne	.-8      	; 0x322 <main+0x54>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0x5e>
 32c:	00 00       	nop
		if (a%2)
		{
			//0.1초의 딜레이 추가
			_delay_ms(100);
			//i의 값에 따라 7-segment LED를 조정한다.
			fnd_write_numbers(i);
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 df       	rcall	.-508    	; 0x138 <fnd_write_numbers>
 334:	01 e0       	ldi	r16, 0x01	; 1
			i++;
 336:	10 e0       	ldi	r17, 0x00	; 0
 338:	eb cf       	rjmp	.-42     	; 0x310 <main+0x42>
 33a:	c0 fd       	sbrc	r28, 0
		if (switch_hit2()==1)
		{
			i=0;
		}
		
		if (a%2)
 33c:	ef cf       	rjmp	.-34     	; 0x31c <main+0x4e>
 33e:	00 e0       	ldi	r16, 0x00	; 0
		//sw2 스위치를 눌렀는지 확인한다.
		a += switch_hit();
		//sw3 스위치를 눌렀으면 0으로 초기화한다.
		if (switch_hit2()==1)
		{
			i=0;
 340:	10 e0       	ldi	r17, 0x00	; 0
 342:	e9 cf       	rjmp	.-46     	; 0x316 <main+0x48>

00000344 <__umulhisi3>:
 344:	a2 9f       	mul	r26, r18
 346:	b0 01       	movw	r22, r0
 348:	b3 9f       	mul	r27, r19
 34a:	c0 01       	movw	r24, r0
 34c:	a3 9f       	mul	r26, r19
 34e:	70 0d       	add	r23, r0
 350:	81 1d       	adc	r24, r1
 352:	11 24       	eor	r1, r1
 354:	91 1d       	adc	r25, r1
 356:	b2 9f       	mul	r27, r18
 358:	70 0d       	add	r23, r0
 35a:	81 1d       	adc	r24, r1
 35c:	11 24       	eor	r1, r1
 35e:	91 1d       	adc	r25, r1
 360:	08 95       	ret

00000362 <_exit>:
 362:	f8 94       	cli

00000364 <__stop_program>:
 364:	ff cf       	rjmp	.-2      	; 0x364 <__stop_program>
