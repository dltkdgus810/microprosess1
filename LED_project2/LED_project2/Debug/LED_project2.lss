
LED_project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000001b0  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bd6  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a93  00000000  00000000  00000e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000353  00000000  00000000  00001929  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052c  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000146  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002332  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	78 c0       	rjmp	.+240    	; 0xf6 <__bad_interrupt>
   6:	00 00       	nop
   8:	76 c0       	rjmp	.+236    	; 0xf6 <__bad_interrupt>
   a:	00 00       	nop
   c:	74 c0       	rjmp	.+232    	; 0xf6 <__bad_interrupt>
   e:	00 00       	nop
  10:	72 c0       	rjmp	.+228    	; 0xf6 <__bad_interrupt>
  12:	00 00       	nop
  14:	70 c0       	rjmp	.+224    	; 0xf6 <__bad_interrupt>
  16:	00 00       	nop
  18:	6e c0       	rjmp	.+220    	; 0xf6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6c c0       	rjmp	.+216    	; 0xf6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6a c0       	rjmp	.+212    	; 0xf6 <__bad_interrupt>
  22:	00 00       	nop
  24:	68 c0       	rjmp	.+208    	; 0xf6 <__bad_interrupt>
  26:	00 00       	nop
  28:	66 c0       	rjmp	.+204    	; 0xf6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	64 c0       	rjmp	.+200    	; 0xf6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	62 c0       	rjmp	.+196    	; 0xf6 <__bad_interrupt>
  32:	00 00       	nop
  34:	60 c0       	rjmp	.+192    	; 0xf6 <__bad_interrupt>
  36:	00 00       	nop
  38:	5e c0       	rjmp	.+188    	; 0xf6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5c c0       	rjmp	.+184    	; 0xf6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5a c0       	rjmp	.+180    	; 0xf6 <__bad_interrupt>
  42:	00 00       	nop
  44:	58 c0       	rjmp	.+176    	; 0xf6 <__bad_interrupt>
  46:	00 00       	nop
  48:	56 c0       	rjmp	.+172    	; 0xf6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	54 c0       	rjmp	.+168    	; 0xf6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	52 c0       	rjmp	.+164    	; 0xf6 <__bad_interrupt>
  52:	00 00       	nop
  54:	50 c0       	rjmp	.+160    	; 0xf6 <__bad_interrupt>
  56:	00 00       	nop
  58:	4e c0       	rjmp	.+156    	; 0xf6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4c c0       	rjmp	.+152    	; 0xf6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4a c0       	rjmp	.+148    	; 0xf6 <__bad_interrupt>
  62:	00 00       	nop
  64:	48 c0       	rjmp	.+144    	; 0xf6 <__bad_interrupt>
  66:	00 00       	nop
  68:	46 c0       	rjmp	.+140    	; 0xf6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	44 c0       	rjmp	.+136    	; 0xf6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	42 c0       	rjmp	.+132    	; 0xf6 <__bad_interrupt>
  72:	00 00       	nop
  74:	40 c0       	rjmp	.+128    	; 0xf6 <__bad_interrupt>
  76:	00 00       	nop
  78:	3e c0       	rjmp	.+124    	; 0xf6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3c c0       	rjmp	.+120    	; 0xf6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3a c0       	rjmp	.+116    	; 0xf6 <__bad_interrupt>
  82:	00 00       	nop
  84:	38 c0       	rjmp	.+112    	; 0xf6 <__bad_interrupt>
  86:	00 00       	nop
  88:	36 c0       	rjmp	.+108    	; 0xf6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	34 c0       	rjmp	.+104    	; 0xf6 <__bad_interrupt>
  8e:	00 00       	nop
  90:	32 c0       	rjmp	.+100    	; 0xf6 <__bad_interrupt>
  92:	00 00       	nop
  94:	30 c0       	rjmp	.+96     	; 0xf6 <__bad_interrupt>
  96:	00 00       	nop
  98:	2e c0       	rjmp	.+92     	; 0xf6 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2c c0       	rjmp	.+88     	; 0xf6 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2a c0       	rjmp	.+84     	; 0xf6 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	28 c0       	rjmp	.+80     	; 0xf6 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	26 c0       	rjmp	.+76     	; 0xf6 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	24 c0       	rjmp	.+72     	; 0xf6 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	22 c0       	rjmp	.+68     	; 0xf6 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	20 c0       	rjmp	.+64     	; 0xf6 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1e c0       	rjmp	.+60     	; 0xf6 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1c c0       	rjmp	.+56     	; 0xf6 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1a c0       	rjmp	.+52     	; 0xf6 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	18 c0       	rjmp	.+48     	; 0xf6 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	16 c0       	rjmp	.+44     	; 0xf6 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	e0 eb       	ldi	r30, 0xB0	; 176
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a2 30       	cpi	r26, 0x02	; 2
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>
  f2:	11 d0       	rcall	.+34     	; 0x116 <main>
  f4:	5b c0       	rjmp	.+182    	; 0x1ac <_exit>

000000f6 <__bad_interrupt>:
  f6:	84 cf       	rjmp	.-248    	; 0x0 <__vectors>

000000f8 <switch_hit>:
uint8_t switch_hit(void)
{
	static uint8_t prev_state = _BV(SW2);
	uint8_t cur_state;
	
	cur_state = PINE & _BV(SW2);
  f8:	9c b1       	in	r25, 0x0c	; 12
  fa:	90 78       	andi	r25, 0x80	; 128
	if(prev_state != cur_state)
  fc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 100:	98 17       	cp	r25, r24
 102:	39 f0       	breq	.+14     	; 0x112 <switch_hit+0x1a>
	{
		prev_state = cur_state;
 104:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__data_start>
		if(cur_state) return 1;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	91 11       	cpse	r25, r1
 10c:	03 c0       	rjmp	.+6      	; 0x114 <switch_hit+0x1c>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	08 95       	ret
		else return 0;
	}
	else
	return 0;
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	08 95       	ret

00000116 <main>:
#define SW2 PE7

uint8_t switch_hit(void);

int main(void)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	00 d0       	rcall	.+0      	; 0x11c <main+0x6>
 11c:	00 d0       	rcall	.+0      	; 0x11e <main+0x8>
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	//변수를 초기화하고, 설정값들을 초기화한다.
	DDRC = _BV(LED1) | _BV(LED2) | _BV(LED3) | _BV(LED4);
 122:	8f e0       	ldi	r24, 0x0F	; 15
 124:	87 b9       	out	0x07, r24	; 7
	PORTE = _BV(SW2);
 126:	80 e8       	ldi	r24, 0x80	; 128
 128:	8e b9       	out	0x0e, r24	; 14
	PORTC |= _BV(LED3) | _BV(LED4);
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	8c 60       	ori	r24, 0x0C	; 12
 12e:	88 b9       	out	0x08, r24	; 8
	
	uint8_t i = 0;
	uint8_t a = 0;
	uint8_t led_pattern[4] = {0x0c, 0x09, 0x03, 0x06};
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	89 83       	std	Y+1, r24	; 0x01
 134:	89 e0       	ldi	r24, 0x09	; 9
 136:	8a 83       	std	Y+2, r24	; 0x02
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	8b 83       	std	Y+3, r24	; 0x03
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	8c 83       	std	Y+4, r24	; 0x04
	DDRC = _BV(LED1) | _BV(LED2) | _BV(LED3) | _BV(LED4);
	PORTE = _BV(SW2);
	PORTC |= _BV(LED3) | _BV(LED4);
	
	uint8_t i = 0;
	uint8_t a = 0;
 140:	00 e0       	ldi	r16, 0x00	; 0
	//변수를 초기화하고, 설정값들을 초기화한다.
	DDRC = _BV(LED1) | _BV(LED2) | _BV(LED3) | _BV(LED4);
	PORTE = _BV(SW2);
	PORTC |= _BV(LED3) | _BV(LED4);
	
	uint8_t i = 0;
 142:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t led_pattern[4] = {0x0c, 0x09, 0x03, 0x06};
	
	while (1)
	{
		//스위치를 눌렀을 때 몇번 눌렀는지 감지한다.
		a = a + switch_hit();
 144:	d9 df       	rcall	.-78     	; 0xf8 <switch_hit>
 146:	08 0f       	add	r16, r24
		
		if(a%2)//스위치를 짝수번을 누르면 정방향 패턴을 진행하고, 홀수번이면 반대방향을 진행한다.
 148:	00 ff       	sbrs	r16, 0
 14a:	18 c0       	rjmp	.+48     	; 0x17c <main+0x66>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	81 ee       	ldi	r24, 0xE1	; 225
 150:	94 e0       	ldi	r25, 0x04	; 4
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x3c>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x46>
 15c:	00 00       	nop
		{
			_delay_ms(100);
			PORTC = (PORTC & 0xf0) | led_pattern[i--%4];
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	91 2f       	mov	r25, r17
 162:	93 70       	andi	r25, 0x03	; 3
 164:	e1 e0       	ldi	r30, 0x01	; 1
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	ec 0f       	add	r30, r28
 16a:	fd 1f       	adc	r31, r29
 16c:	e9 0f       	add	r30, r25
 16e:	f1 1d       	adc	r31, r1
 170:	80 7f       	andi	r24, 0xF0	; 240
 172:	90 81       	ld	r25, Z
 174:	89 2b       	or	r24, r25
 176:	88 b9       	out	0x08, r24	; 8
 178:	11 50       	subi	r17, 0x01	; 1
 17a:	e4 cf       	rjmp	.-56     	; 0x144 <main+0x2e>
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	81 ee       	ldi	r24, 0xE1	; 225
 180:	94 e0       	ldi	r25, 0x04	; 4
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x6c>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x76>
 18c:	00 00       	nop
		}
		else
		{
			_delay_ms(100);
			PORTC = (PORTC & 0xf0) | led_pattern[i++%4];
 18e:	88 b1       	in	r24, 0x08	; 8
 190:	91 2f       	mov	r25, r17
 192:	93 70       	andi	r25, 0x03	; 3
 194:	e1 e0       	ldi	r30, 0x01	; 1
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	ec 0f       	add	r30, r28
 19a:	fd 1f       	adc	r31, r29
 19c:	e9 0f       	add	r30, r25
 19e:	f1 1d       	adc	r31, r1
 1a0:	80 7f       	andi	r24, 0xF0	; 240
 1a2:	90 81       	ld	r25, Z
 1a4:	89 2b       	or	r24, r25
 1a6:	88 b9       	out	0x08, r24	; 8
 1a8:	1f 5f       	subi	r17, 0xFF	; 255
 1aa:	cc cf       	rjmp	.-104    	; 0x144 <main+0x2e>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
