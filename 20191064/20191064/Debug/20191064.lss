
20191064.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a4  00800200  00000952  000009e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000952  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008004a4  008004a4  00000c8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b3  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e87  00000000  00000000  000022af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a5  00000000  00000000  00003136  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00003adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c8  00000000  00000000  00003cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000667  00000000  00000000  000043c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004a27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__bad_interrupt>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	00 00       	nop
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	00 00       	nop
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c1       	rjmp	.+620    	; 0x28e <__vector_8>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	41 c1       	rjmp	.+642    	; 0x2e8 <__vector_25>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3c c0       	rjmp	.+120    	; 0x106 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3a c0       	rjmp	.+116    	; 0x106 <__bad_interrupt>
  92:	00 00       	nop
  94:	38 c0       	rjmp	.+112    	; 0x106 <__bad_interrupt>
  96:	00 00       	nop
  98:	36 c0       	rjmp	.+108    	; 0x106 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	34 c0       	rjmp	.+104    	; 0x106 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	32 c0       	rjmp	.+100    	; 0x106 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	30 c0       	rjmp	.+96     	; 0x106 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2e c0       	rjmp	.+92     	; 0x106 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2c c0       	rjmp	.+88     	; 0x106 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2a c0       	rjmp	.+84     	; 0x106 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	28 c0       	rjmp	.+80     	; 0x106 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	26 c0       	rjmp	.+76     	; 0x106 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	24 c0       	rjmp	.+72     	; 0x106 <__bad_interrupt>
  be:	00 00       	nop
  c0:	22 c0       	rjmp	.+68     	; 0x106 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	20 c0       	rjmp	.+64     	; 0x106 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1e c0       	rjmp	.+60     	; 0x106 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	14 e0       	ldi	r17, 0x04	; 4
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	e2 e5       	ldi	r30, 0x52	; 82
  e0:	f9 e0       	ldi	r31, 0x09	; 9
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a4 3a       	cpi	r26, 0xA4	; 164
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	24 e0       	ldi	r18, 0x04	; 4
  f4:	a4 ea       	ldi	r26, 0xA4	; 164
  f6:	b4 e0       	ldi	r27, 0x04	; 4
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	a8 3a       	cpi	r26, 0xA8	; 168
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	77 d1       	rcall	.+750    	; 0x3f2 <main>
 104:	24 c4       	rjmp	.+2120   	; 0x94e <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <fnd_write>:
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline void fnd_clear(uint8_t fnd_num)
{
    fnd_write(fnd_num, 0);
 108:	9f b7       	in	r25, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	84 bb       	out	0x14, r24	; 20
 10e:	68 b9       	out	0x08, r22	; 8
 110:	87 e0       	ldi	r24, 0x07	; 7
 112:	84 bb       	out	0x14, r24	; 20
 114:	99 23       	and	r25, r25
 116:	0c f4       	brge	.+2      	; 0x11a <fnd_write+0x12>
 118:	78 94       	sei
 11a:	08 95       	ret

0000011c <fnd_clear_all>:
/* ----------------------------------------------------------------------------
 * clear all FNDs 
 * -------------------------------------------------------------------------- */
void fnd_clear_all(void)
{
    fnd_write(0, 0);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	f3 df       	rcall	.-26     	; 0x108 <fnd_write>
    fnd_write(1, 0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	f0 df       	rcall	.-32     	; 0x108 <fnd_write>
    fnd_write(2, 0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	ed cf       	rjmp	.-38     	; 0x108 <fnd_write>
 12e:	08 95       	ret

00000130 <fnd_write_number>:
{
    static uint8_t num_code[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x6f,
                                  0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71};
    uint8_t value;
    
    value = num_code[num] | (dot_on<<7);
 130:	e6 2f       	mov	r30, r22
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ec 56       	subi	r30, 0x6C	; 108
 136:	fb 4f       	sbci	r31, 0xFB	; 251
    fnd_write(fnd_num, value);    
 138:	90 e8       	ldi	r25, 0x80	; 128
 13a:	49 9f       	mul	r20, r25
 13c:	a0 01       	movw	r20, r0
 13e:	11 24       	eor	r1, r1
 140:	60 81       	ld	r22, Z
 142:	64 2b       	or	r22, r20
 144:	e1 cf       	rjmp	.-62     	; 0x108 <fnd_write>
 146:	08 95       	ret

00000148 <fnd_write_numbers>:
}

void fnd_write_numbers(uint16_t num)
{
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	8c 01       	movw	r16, r24
	uint16_t a = num%10;
 152:	9c 01       	movw	r18, r24
 154:	ad ec       	ldi	r26, 0xCD	; 205
 156:	bc ec       	ldi	r27, 0xCC	; 204
 158:	c9 d3       	rcall	.+1938   	; 0x8ec <__umulhisi3>
 15a:	fc 01       	movw	r30, r24
 15c:	f6 95       	lsr	r31
 15e:	e7 95       	ror	r30
 160:	f6 95       	lsr	r31
 162:	e7 95       	ror	r30
 164:	f6 95       	lsr	r31
 166:	e7 95       	ror	r30
 168:	cf 01       	movw	r24, r30
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e8 0f       	add	r30, r24
 17c:	f9 1f       	adc	r31, r25
 17e:	c8 01       	movw	r24, r16
 180:	8e 1b       	sub	r24, r30
 182:	9f 0b       	sbc	r25, r31
 184:	fc 01       	movw	r30, r24
	uint16_t b = (num/10)%10;
 186:	b2 d3       	rcall	.+1892   	; 0x8ec <__umulhisi3>
 188:	ac 01       	movw	r20, r24
 18a:	56 95       	lsr	r21
 18c:	47 95       	ror	r20
 18e:	56 95       	lsr	r21
 190:	47 95       	ror	r20
 192:	56 95       	lsr	r21
 194:	47 95       	ror	r20
 196:	9a 01       	movw	r18, r20
 198:	a9 d3       	rcall	.+1874   	; 0x8ec <__umulhisi3>
 19a:	ec 01       	movw	r28, r24
 19c:	d6 95       	lsr	r29
 19e:	c7 95       	ror	r28
 1a0:	d6 95       	lsr	r29
 1a2:	c7 95       	ror	r28
 1a4:	d6 95       	lsr	r29
 1a6:	c7 95       	ror	r28
 1a8:	ce 01       	movw	r24, r28
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	cc 0f       	add	r28, r28
 1b0:	dd 1f       	adc	r29, r29
 1b2:	cc 0f       	add	r28, r28
 1b4:	dd 1f       	adc	r29, r29
 1b6:	cc 0f       	add	r28, r28
 1b8:	dd 1f       	adc	r29, r29
 1ba:	c8 0f       	add	r28, r24
 1bc:	d9 1f       	adc	r29, r25
 1be:	ca 01       	movw	r24, r20
 1c0:	8c 1b       	sub	r24, r28
 1c2:	9d 0b       	sbc	r25, r29
 1c4:	ec 01       	movw	r28, r24
 1c6:	0a 30       	cpi	r16, 0x0A	; 10
	uint16_t c = (num/100)%10;
	
	if(num<10)
 1c8:	11 05       	cpc	r17, r1
 1ca:	58 f4       	brcc	.+22     	; 0x1e2 <fnd_write_numbers+0x9a>
 1cc:	40 e0       	ldi	r20, 0x00	; 0
	{
		fnd_write_number(0,a,0);
 1ce:	6e 2f       	mov	r22, r30
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	ae df       	rcall	.-164    	; 0x130 <fnd_write_number>
		fnd_write(1,0);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	97 df       	rcall	.-210    	; 0x108 <fnd_write>
		fnd_write(2,0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	94 df       	rcall	.-216    	; 0x108 <fnd_write>
 1e0:	3d c0       	rjmp	.+122    	; 0x25c <fnd_write_numbers+0x114>
 1e2:	04 36       	cpi	r16, 0x64	; 100
	}
	else if(num<100)
 1e4:	11 05       	cpc	r17, r1
 1e6:	60 f4       	brcc	.+24     	; 0x200 <fnd_write_numbers+0xb8>
	{
		fnd_write_number(0,a,0);
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	6e 2f       	mov	r22, r30
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	a0 df       	rcall	.-192    	; 0x130 <fnd_write_number>
		fnd_write_number(1,b,0);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	6c 2f       	mov	r22, r28
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	9c df       	rcall	.-200    	; 0x130 <fnd_write_number>
		fnd_write(2,0);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	85 df       	rcall	.-246    	; 0x108 <fnd_write>
 1fe:	2e c0       	rjmp	.+92     	; 0x25c <fnd_write_numbers+0x114>
	}
	else
	{
		fnd_write_number(0,a,0);
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	6e 2f       	mov	r22, r30
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	94 df       	rcall	.-216    	; 0x130 <fnd_write_number>
 208:	40 e0       	ldi	r20, 0x00	; 0
		fnd_write_number(1,b,0);
 20a:	6c 2f       	mov	r22, r28
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 df       	rcall	.-224    	; 0x130 <fnd_write_number>
 210:	98 01       	movw	r18, r16
		fnd_write_number(2,c,0);
 212:	36 95       	lsr	r19
 214:	27 95       	ror	r18
 216:	36 95       	lsr	r19
 218:	27 95       	ror	r18
 21a:	ab e7       	ldi	r26, 0x7B	; 123
 21c:	b4 e1       	ldi	r27, 0x14	; 20
 21e:	66 d3       	rcall	.+1740   	; 0x8ec <__umulhisi3>
 220:	ac 01       	movw	r20, r24
 222:	56 95       	lsr	r21
 224:	47 95       	ror	r20
 226:	9a 01       	movw	r18, r20
 228:	ad ec       	ldi	r26, 0xCD	; 205
 22a:	bc ec       	ldi	r27, 0xCC	; 204
 22c:	5f d3       	rcall	.+1726   	; 0x8ec <__umulhisi3>
 22e:	96 95       	lsr	r25
 230:	87 95       	ror	r24
 232:	96 95       	lsr	r25
 234:	87 95       	ror	r24
 236:	96 95       	lsr	r25
 238:	87 95       	ror	r24
 23a:	9c 01       	movw	r18, r24
 23c:	22 0f       	add	r18, r18
 23e:	33 1f       	adc	r19, r19
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	82 0f       	add	r24, r18
 24e:	93 1f       	adc	r25, r19
 250:	ba 01       	movw	r22, r20
 252:	68 1b       	sub	r22, r24
 254:	79 0b       	sbc	r23, r25
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	6a df       	rcall	.-300    	; 0x130 <fnd_write_number>
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
	}
	
}
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	08 95       	ret

00000266 <led_write>:
 266:	9f b7       	in	r25, 0x3f	; 63
 268:	f8 94       	cli
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline static void fnd_select(uint8_t fnd_num)
{
    PORTG = fnd_num;
 26a:	23 e0       	ldi	r18, 0x03	; 3
 26c:	24 bb       	out	0x14, r18	; 20
    
    sreg = SREG;            // save SREG
    cli();                  // disable interrupt to prevent shared-data problem

    fnd_select(3);
    PORTC = value;
 26e:	88 b9       	out	0x08, r24	; 8
/* ----------------------------------------------------------------------------
 * deselect selected FND
 * -------------------------------------------------------------------------- */
inline static void fnd_deselect(void)
{
    PORTG = 0x07;
 270:	87 e0       	ldi	r24, 0x07	; 7
 272:	84 bb       	out	0x14, r24	; 20

    fnd_select(3);
    PORTC = value;
    fnd_deselect();

    if(sreg&0x80)           // if global interrupt was enabled before executing cli()
 274:	99 23       	and	r25, r25
 276:	0c f4       	brge	.+2      	; 0x27a <led_write+0x14>
        sei();              // enable interrupt        
 278:	78 94       	sei
 27a:	08 95       	ret

0000027c <fnd_init>:
 * initialize port for FND/LED interface
 * -------------------------------------------------------------------------- */
inline static void fnd_port_init(void)
{
    // configure output
    DDRC = 0xff;            // PORTC[7..0]
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	87 b9       	out	0x07, r24	; 7
    DDRG = 0x07;            // PORTG[2..0]
 280:	87 e0       	ldi	r24, 0x07	; 7
 282:	83 bb       	out	0x13, r24	; 19
    DDRB |= _BV(LED_COLOR);
 284:	24 9a       	sbi	0x04, 4	; 4
 * initialize FND/LED
 * -------------------------------------------------------------------------- */
void fnd_init(void)
{
    fnd_port_init();
    fnd_clear_all();
 286:	4a df       	rcall	.-364    	; 0x11c <fnd_clear_all>
    led_write(0xff);
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	ed cf       	rjmp	.-38     	; 0x266 <led_write>
 28c:	08 95       	ret

0000028e <__vector_8>:
uint8_t led_num = 0;
volatile uint16_t notes_num = 0;
volatile uint8_t song_num = 0;

ISR(INT7_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	0b b6       	in	r0, 0x3b	; 59
 29a:	0f 92       	push	r0
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
	if (fnd_num == 255)
 2b4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <fnd_num>
 2b8:	8f 3f       	cpi	r24, 0xFF	; 255
 2ba:	19 f4       	brne	.+6      	; 0x2c2 <__vector_8+0x34>
	{
		fnd_write_numbers(fnd_num);
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	43 df       	rcall	.-378    	; 0x148 <fnd_write_numbers>
	}	
}
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	7f 91       	pop	r23
 2d0:	6f 91       	pop	r22
 2d2:	5f 91       	pop	r21
 2d4:	4f 91       	pop	r20
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0b be       	out	0x3b, r0	; 59
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <__vector_25>:

ISR(USART0_RX_vect)
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	0b b6       	in	r0, 0x3b	; 59
 2f4:	0f 92       	push	r0
 2f6:	8f 93       	push	r24
 2f8:	ef 93       	push	r30
 2fa:	ff 93       	push	r31
	if (UDR0 == 's' || UDR0 == 'S')
 2fc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 300:	83 37       	cpi	r24, 0x73	; 115
 302:	21 f0       	breq	.+8      	; 0x30c <__vector_25+0x24>
 304:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 308:	83 35       	cpi	r24, 0x53	; 83
 30a:	49 f4       	brne	.+18     	; 0x31e <__vector_25+0x36>
	{
		song_num++;
 30c:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__data_end>
 310:	8f 5f       	subi	r24, 0xFF	; 255
 312:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <__data_end>
		UDR0 = UDR0;	
 316:	e6 ec       	ldi	r30, 0xC6	; 198
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	80 83       	st	Z, r24
	}
	if (UDR0 == '1' || UDR0 == '2'|| UDR0 == '3' || UDR0 == '4'|| UDR0 == '5' || UDR0 == '6'|| UDR0 == '7' || UDR0 == '8'|| UDR0 == '9' || UDR0 == '0')
 31e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 322:	81 33       	cpi	r24, 0x31	; 49
 324:	21 f1       	breq	.+72     	; 0x36e <__vector_25+0x86>
 326:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 32a:	82 33       	cpi	r24, 0x32	; 50
 32c:	01 f1       	breq	.+64     	; 0x36e <__vector_25+0x86>
 32e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 332:	83 33       	cpi	r24, 0x33	; 51
 334:	e1 f0       	breq	.+56     	; 0x36e <__vector_25+0x86>
 336:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 33a:	84 33       	cpi	r24, 0x34	; 52
 33c:	c1 f0       	breq	.+48     	; 0x36e <__vector_25+0x86>
 33e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 342:	85 33       	cpi	r24, 0x35	; 53
 344:	a1 f0       	breq	.+40     	; 0x36e <__vector_25+0x86>
 346:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 34a:	86 33       	cpi	r24, 0x36	; 54
 34c:	81 f0       	breq	.+32     	; 0x36e <__vector_25+0x86>
 34e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 352:	87 33       	cpi	r24, 0x37	; 55
 354:	61 f0       	breq	.+24     	; 0x36e <__vector_25+0x86>
 356:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 35a:	88 33       	cpi	r24, 0x38	; 56
 35c:	41 f0       	breq	.+16     	; 0x36e <__vector_25+0x86>
 35e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 362:	89 33       	cpi	r24, 0x39	; 57
 364:	21 f0       	breq	.+8      	; 0x36e <__vector_25+0x86>
 366:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 36a:	80 33       	cpi	r24, 0x30	; 48
 36c:	21 f4       	brne	.+8      	; 0x376 <__vector_25+0x8e>
	{
		UDR0 = UDR0;
 36e:	e6 ec       	ldi	r30, 0xC6	; 198
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	80 83       	st	Z, r24
	}
	if (UDR0 == 'o' || UDR0 == 'O')
 376:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 37a:	8f 36       	cpi	r24, 0x6F	; 111
 37c:	21 f0       	breq	.+8      	; 0x386 <__vector_25+0x9e>
 37e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 382:	8f 34       	cpi	r24, 0x4F	; 79
 384:	29 f4       	brne	.+10     	; 0x390 <__vector_25+0xa8>
	{
		led_num++;
 386:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <led_num>
 38a:	8f 5f       	subi	r24, 0xFF	; 255
 38c:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <led_num>
	}
	if (UDR0 == 13)
 390:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 394:	8d 30       	cpi	r24, 0x0D	; 13
 396:	19 f4       	brne	.+6      	; 0x39e <__vector_25+0xb6>
	{
		UDR0 = 10;
 398:	8a e0       	ldi	r24, 0x0A	; 10
 39a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
}
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	8f 91       	pop	r24
 3a4:	0f 90       	pop	r0
 3a6:	0b be       	out	0x3b, r0	; 59
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <ioport_init>:
}

void ioport_init()
{
	//DDRC의 하위 4bit을 출력하는 단자로 만든다.
	DDRC = _BV(LED1) | _BV(LED2) | _BV(LED3) | _BV(LED4);
 3b2:	8f e0       	ldi	r24, 0x0F	; 15
 3b4:	87 b9       	out	0x07, r24	; 7
	//MCU의 LED보드 4개의 불을 끈다.
	PORTC = 0xff;
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	88 b9       	out	0x08, r24	; 8
	//MCU 보드의 SW2의 내부 pull-up저항을 활성화 한다.
	PORTE = _BV(SW2);
 3ba:	80 e8       	ldi	r24, 0x80	; 128
 3bc:	8e b9       	out	0x0e, r24	; 14
	
	DDRE = _BV(SOUND_OUT);
 3be:	88 e0       	ldi	r24, 0x08	; 8
 3c0:	8d b9       	out	0x0d, r24	; 13
	DDRB = _BV(PB4);
 3c2:	80 e1       	ldi	r24, 0x10	; 16
 3c4:	84 b9       	out	0x04, r24	; 4
 3c6:	08 95       	ret

000003c8 <interrupt_init>:
}

void interrupt_init(void)
{
	//falling 엣지가 일어날 때 INT7가 발생하게한다.
	EICRB = _BV(ISC71);
 3c8:	80 e8       	ldi	r24, 0x80	; 128
 3ca:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	//INT7을 활성화한다.
	EIMSK = _BV(INT7);
 3ce:	8d bb       	out	0x1d, r24	; 29
	// global interrupt flag을 set시킨다.
	sei();
 3d0:	78 94       	sei
 3d2:	08 95       	ret

000003d4 <switch_hit>:
uint8_t switch_hit(void)
{
	static uint8_t prev_state = _BV(SW2);
	uint8_t cur_state;
	
	cur_state = PINE & _BV(SW2);
 3d4:	9c b1       	in	r25, 0x0c	; 12
 3d6:	90 78       	andi	r25, 0x80	; 128
	if(prev_state != cur_state)
 3d8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 3dc:	98 17       	cp	r25, r24
 3de:	39 f0       	breq	.+14     	; 0x3ee <switch_hit+0x1a>
	{
		prev_state = cur_state;
 3e0:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__data_start>
		if(!cur_state) return 1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	99 23       	and	r25, r25
 3e8:	19 f0       	breq	.+6      	; 0x3f0 <switch_hit+0x1c>
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	08 95       	ret
		else return 0;
	}
	else
	return 0;
 3ee:	80 e0       	ldi	r24, 0x00	; 0
}
 3f0:	08 95       	ret

000003f2 <main>:
		UDR0 = 10;
	}
}
int main(void)
{
	ioport_init();
 3f2:	df df       	rcall	.-66     	; 0x3b2 <ioport_init>
	interrupt_init();
 3f4:	e9 df       	rcall	.-46     	; 0x3c8 <interrupt_init>
	fnd_init();
 3f6:	42 df       	rcall	.-380    	; 0x27c <fnd_init>
	uart_init();
 3f8:	fa d0       	rcall	.+500    	; 0x5ee <uart_init>
 3fa:	8c ec       	ldi	r24, 0xCC	; 204
	led_write(0xCC);
 3fc:	34 df       	rcall	.-408    	; 0x266 <led_write>
 3fe:	10 e0       	ldi	r17, 0x00	; 0
 400:	c0 e9       	ldi	r28, 0x90	; 144
	uint8_t a = 0;
 402:	d1 e0       	ldi	r29, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 404:	0b ed       	ldi	r16, 0xDB	; 219
		{
			led_write(0xCC);
		}
		if (song_num%2)
		{
			if (!m_notes[notes_num%m_notes_size])
 406:	ee 24       	eor	r14, r14

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 408:	e3 94       	inc	r14
 40a:	f1 2c       	mov	r15, r1
 40c:	e3 df       	rcall	.-58     	; 0x3d4 <switch_hit>
	uint16_t m_duration_real = 0;
	
    /* Replace with your application code */
    while (1) 
    {
		a += switch_hit();
 40e:	18 0f       	add	r17, r24
 410:	10 ff       	sbrs	r17, 0
 412:	0e c0       	rjmp	.+28     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		
		if (a%2)
 414:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <fnd_num>
		{
			fnd_num--;
 418:	81 50       	subi	r24, 0x01	; 1
 41a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <fnd_num>
 41e:	90 e0       	ldi	r25, 0x00	; 0
			fnd_write_numbers(fnd_num);
 420:	93 de       	rcall	.-730    	; 0x148 <fnd_write_numbers>
 422:	80 ed       	ldi	r24, 0xD0	; 208
 424:	97 e0       	ldi	r25, 0x07	; 7
 426:	fe 01       	movw	r30, r28
 428:	31 97       	sbiw	r30, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	d9 f7       	brne	.-10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 430:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <led_num>
			_delay_ms(200);
		}
		if (led_num%2)
 434:	80 ff       	sbrs	r24, 0
 436:	03 c0       	rjmp	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		{
			led_write(0);
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	15 df       	rcall	.-470    	; 0x266 <led_write>
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43e:	8c ec       	ldi	r24, 0xCC	; 204
		}
		else
		{
			led_write(0xCC);
 440:	12 df       	rcall	.-476    	; 0x266 <led_write>
 442:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__data_end>
		}
		if (song_num%2)
 446:	80 ff       	sbrs	r24, 0
 448:	ab c0       	rjmp	.+342    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 44a:	40 91 a5 04 	lds	r20, 0x04A5	; 0x8004a5 <notes_num>
		{
			if (!m_notes[notes_num%m_notes_size])
 44e:	50 91 a6 04 	lds	r21, 0x04A6	; 0x8004a6 <notes_num+0x1>
 452:	9a 01       	movw	r18, r20
 454:	a1 e4       	ldi	r26, 0x41	; 65
 456:	bb e2       	ldi	r27, 0x2B	; 43
 458:	49 d2       	rcall	.+1170   	; 0x8ec <__umulhisi3>
 45a:	28 1b       	sub	r18, r24
 45c:	39 0b       	sbc	r19, r25
 45e:	36 95       	lsr	r19
 460:	27 95       	ror	r18
 462:	82 0f       	add	r24, r18
 464:	93 1f       	adc	r25, r19
 466:	88 0f       	add	r24, r24
 468:	89 2f       	mov	r24, r25
 46a:	88 1f       	adc	r24, r24
 46c:	99 0b       	sbc	r25, r25
 46e:	91 95       	neg	r25
 470:	08 9f       	mul	r16, r24
 472:	90 01       	movw	r18, r0
 474:	09 9f       	mul	r16, r25
 476:	30 0d       	add	r19, r0
 478:	11 24       	eor	r1, r1
 47a:	fa 01       	movw	r30, r20
 47c:	e2 1b       	sub	r30, r18
 47e:	f3 0b       	sbc	r31, r19
 480:	ee 0f       	add	r30, r30
 482:	ff 1f       	adc	r31, r31
 484:	e3 52       	subi	r30, 0x23	; 35
 486:	fd 4f       	sbci	r31, 0xFD	; 253
 488:	80 81       	ld	r24, Z
 48a:	91 81       	ldd	r25, Z+1	; 0x01
 48c:	89 2b       	or	r24, r25
 48e:	11 f4       	brne	.+4      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 490:	a3 d0       	rcall	.+326    	; 0x5d8 <sound_mute>
			{
				sound_mute();
 492:	22 c0       	rjmp	.+68     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 494:	40 91 a5 04 	lds	r20, 0x04A5	; 0x8004a5 <notes_num>
			}
			else
			{
				sound_set_frequency(m_notes[notes_num%m_notes_size]);
 498:	50 91 a6 04 	lds	r21, 0x04A6	; 0x8004a6 <notes_num+0x1>
 49c:	9a 01       	movw	r18, r20
 49e:	a1 e4       	ldi	r26, 0x41	; 65
 4a0:	bb e2       	ldi	r27, 0x2B	; 43
 4a2:	24 d2       	rcall	.+1096   	; 0x8ec <__umulhisi3>
 4a4:	28 1b       	sub	r18, r24
 4a6:	39 0b       	sbc	r19, r25
 4a8:	36 95       	lsr	r19
 4aa:	27 95       	ror	r18
 4ac:	82 0f       	add	r24, r18
 4ae:	93 1f       	adc	r25, r19
 4b0:	88 0f       	add	r24, r24
 4b2:	89 2f       	mov	r24, r25
 4b4:	88 1f       	adc	r24, r24
 4b6:	99 0b       	sbc	r25, r25
 4b8:	91 95       	neg	r25
 4ba:	08 9f       	mul	r16, r24
 4bc:	90 01       	movw	r18, r0
 4be:	09 9f       	mul	r16, r25
 4c0:	30 0d       	add	r19, r0
 4c2:	11 24       	eor	r1, r1
 4c4:	fa 01       	movw	r30, r20
 4c6:	e2 1b       	sub	r30, r18
 4c8:	f3 0b       	sbc	r31, r19
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	e3 52       	subi	r30, 0x23	; 35
 4d0:	fd 4f       	sbci	r31, 0xFD	; 253
 4d2:	80 81       	ld	r24, Z
 4d4:	91 81       	ldd	r25, Z+1	; 0x01
 4d6:	66 d0       	rcall	.+204    	; 0x5a4 <sound_set_frequency>
 4d8:	40 91 a5 04 	lds	r20, 0x04A5	; 0x8004a5 <notes_num>
			}
			
			m_duration_real = (m_duration[notes_num%m_duration_size] * music_tempo);
 4dc:	50 91 a6 04 	lds	r21, 0x04A6	; 0x8004a6 <notes_num+0x1>
 4e0:	9a 01       	movw	r18, r20
 4e2:	a1 e4       	ldi	r26, 0x41	; 65
 4e4:	bb e2       	ldi	r27, 0x2B	; 43
 4e6:	02 d2       	rcall	.+1028   	; 0x8ec <__umulhisi3>
 4e8:	28 1b       	sub	r18, r24
 4ea:	39 0b       	sbc	r19, r25
 4ec:	36 95       	lsr	r19
 4ee:	27 95       	ror	r18
 4f0:	82 0f       	add	r24, r18
 4f2:	93 1f       	adc	r25, r19
 4f4:	88 0f       	add	r24, r24
 4f6:	89 2f       	mov	r24, r25
 4f8:	88 1f       	adc	r24, r24
 4fa:	99 0b       	sbc	r25, r25
 4fc:	91 95       	neg	r25
 4fe:	08 9f       	mul	r16, r24
 500:	90 01       	movw	r18, r0
 502:	09 9f       	mul	r16, r25
 504:	30 0d       	add	r19, r0
 506:	11 24       	eor	r1, r1
 508:	42 1b       	sub	r20, r18
 50a:	53 0b       	sbc	r21, r19
 50c:	fa 01       	movw	r30, r20
 50e:	ee 5f       	subi	r30, 0xFE	; 254
 510:	fd 4f       	sbci	r31, 0xFD	; 253
 512:	80 81       	ld	r24, Z
 514:	60 91 93 04 	lds	r22, 0x0493	; 0x800493 <music_tempo>
			
			_delay_ms(m_duration_real);
 518:	86 9f       	mul	r24, r22
 51a:	b0 01       	movw	r22, r0
 51c:	11 24       	eor	r1, r1
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	af d0       	rcall	.+350    	; 0x682 <__floatunsisf>
 524:	2b 01       	movw	r4, r22
 526:	3c 01       	movw	r6, r24
 528:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	4a e7       	ldi	r20, 0x7A	; 122
 52e:	55 e4       	ldi	r21, 0x45	; 69
 530:	36 d1       	rcall	.+620    	; 0x79e <__mulsf3>
 532:	4b 01       	movw	r8, r22
 534:	5c 01       	movw	r10, r24
 536:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	40 e8       	ldi	r20, 0x80	; 128
 53c:	5f e3       	ldi	r21, 0x3F	; 63
 53e:	71 d0       	rcall	.+226    	; 0x622 <__cmpsf2>
 540:	88 23       	and	r24, r24
 542:	fc f0       	brlt	.+62     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 544:	20 e0       	ldi	r18, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
 546:	3f ef       	ldi	r19, 0xFF	; 255
 548:	4f e7       	ldi	r20, 0x7F	; 127
 54a:	57 e4       	ldi	r21, 0x47	; 71
 54c:	c5 01       	movw	r24, r10
 54e:	b4 01       	movw	r22, r8
 550:	22 d1       	rcall	.+580    	; 0x796 <__gesf2>
 552:	18 16       	cp	r1, r24
 554:	94 f4       	brge	.+36     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 556:	20 e0       	ldi	r18, 0x00	; 0
 558:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 55a:	40 e2       	ldi	r20, 0x20	; 32
 55c:	51 e4       	ldi	r21, 0x41	; 65
 55e:	c3 01       	movw	r24, r6
 560:	b2 01       	movw	r22, r4
 562:	1d d1       	rcall	.+570    	; 0x79e <__mulsf3>
 564:	62 d0       	rcall	.+196    	; 0x62a <__fixunssfsi>
 566:	61 15       	cp	r22, r1
 568:	71 05       	cpc	r23, r1
 56a:	81 f0       	breq	.+32     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
		while(__ticks)
 56c:	ce 01       	movw	r24, r28
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 572:	61 50       	subi	r22, 0x01	; 1
 574:	71 09       	sbc	r23, r1
 576:	d1 f7       	brne	.-12     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 578:	09 c0       	rjmp	.+18     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 57a:	c5 01       	movw	r24, r10
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 57c:	b4 01       	movw	r22, r8
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 57e:	55 d0       	rcall	.+170    	; 0x62a <__fixunssfsi>
 580:	02 c0       	rjmp	.+4      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 582:	6e 2d       	mov	r22, r14
 584:	7f 2d       	mov	r23, r15
 586:	cb 01       	movw	r24, r22

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 58c:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <notes_num>
 590:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <notes_num+0x1>

			notes_num++;
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <notes_num+0x1>
 59a:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <notes_num>
 59e:	36 cf       	rjmp	.-404    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 5a0:	1b d0       	rcall	.+54     	; 0x5d8 <sound_mute>
 5a2:	34 cf       	rjmp	.-408    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

000005a4 <sound_set_frequency>:


void sound_set_frequency(uint16_t freq_hz)
{
	//OCR3A 값 설정
	OCR3A = (F_CPU/(2*8*freq_hz))-1;
 5a4:	82 95       	swap	r24
 5a6:	92 95       	swap	r25
 5a8:	90 7f       	andi	r25, 0xF0	; 240
 5aa:	98 27       	eor	r25, r24
 5ac:	80 7f       	andi	r24, 0xF0	; 240
 5ae:	98 27       	eor	r25, r24
 5b0:	9c 01       	movw	r18, r24
 5b2:	40 e0       	ldi	r20, 0x00	; 0
 5b4:	50 e0       	ldi	r21, 0x00	; 0
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	74 e2       	ldi	r23, 0x24	; 36
 5ba:	84 ef       	ldi	r24, 0xF4	; 244
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	7a d1       	rcall	.+756    	; 0x8b4 <__divmodsi4>
 5c0:	21 50       	subi	r18, 0x01	; 1
 5c2:	31 09       	sbc	r19, r1
 5c4:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 5c8:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	//Timer3의 prescaler 설정
	TCCR3B |= _BV(CS31);
 5cc:	e1 e9       	ldi	r30, 0x91	; 145
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	82 60       	ori	r24, 0x02	; 2
 5d4:	80 83       	st	Z, r24
 5d6:	08 95       	ret

000005d8 <sound_mute>:
}

void sound_mute(void)
{
	TCCR3B &= ~(_BV(CS32)| _BV(CS31) | _BV(CS30));
 5d8:	e1 e9       	ldi	r30, 0x91	; 145
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	88 7f       	andi	r24, 0xF8	; 248
 5e0:	80 83       	st	Z, r24
	if(PINE & _BV(SOUND_OUT))
 5e2:	63 9b       	sbis	0x0c, 3	; 12
 5e4:	03 c0       	rjmp	.+6      	; 0x5ec <sound_mute+0x14>
	{
		TCCR3C = _BV(FOC3A);	
 5e6:	80 e8       	ldi	r24, 0x80	; 128
 5e8:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
 5ec:	08 95       	ret

000005ee <uart_init>:
void uart_init(void)
{
	#define BAUDRATE 115200L
	
	//UBRR0 값 설정
	UBRR0 = (F_CPU/(8*BAUDRATE))-0.5;
 5ee:	80 e1       	ldi	r24, 0x10	; 16
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 5f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	//U2X0를 1로 설정
	UCSR0A |= _BV(U2X0);
 5fa:	e0 ec       	ldi	r30, 0xC0	; 192
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	80 81       	ld	r24, Z
 600:	82 60       	ori	r24, 0x02	; 2
 602:	80 83       	st	Z, r24
	//인터럽트를 활성화
	UCSR0B |= _BV(RXCIE0);
 604:	e1 ec       	ldi	r30, 0xC1	; 193
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	80 81       	ld	r24, Z
 60a:	80 68       	ori	r24, 0x80	; 128
 60c:	80 83       	st	Z, r24
	// 송신과 수신 모두 enable
	UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
 60e:	80 81       	ld	r24, Z
 610:	88 61       	ori	r24, 0x18	; 24
 612:	80 83       	st	Z, r24
	// 송수신 데이터는 각각 8 비트, stop 비트는 1 비트, no parity
	UCSR0C |= _BV(UCSZ01) | _BV(UCSZ00);
 614:	e2 ec       	ldi	r30, 0xC2	; 194
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	80 81       	ld	r24, Z
 61a:	86 60       	ori	r24, 0x06	; 6
 61c:	80 83       	st	Z, r24
	sei();
 61e:	78 94       	sei
 620:	08 95       	ret

00000622 <__cmpsf2>:
 622:	6c d0       	rcall	.+216    	; 0x6fc <__fp_cmp>
 624:	08 f4       	brcc	.+2      	; 0x628 <__cmpsf2+0x6>
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	08 95       	ret

0000062a <__fixunssfsi>:
 62a:	94 d0       	rcall	.+296    	; 0x754 <__fp_splitA>
 62c:	88 f0       	brcs	.+34     	; 0x650 <__fixunssfsi+0x26>
 62e:	9f 57       	subi	r25, 0x7F	; 127
 630:	90 f0       	brcs	.+36     	; 0x656 <__fixunssfsi+0x2c>
 632:	b9 2f       	mov	r27, r25
 634:	99 27       	eor	r25, r25
 636:	b7 51       	subi	r27, 0x17	; 23
 638:	a0 f0       	brcs	.+40     	; 0x662 <__fixunssfsi+0x38>
 63a:	d1 f0       	breq	.+52     	; 0x670 <__fixunssfsi+0x46>
 63c:	66 0f       	add	r22, r22
 63e:	77 1f       	adc	r23, r23
 640:	88 1f       	adc	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	1a f0       	brmi	.+6      	; 0x64c <__fixunssfsi+0x22>
 646:	ba 95       	dec	r27
 648:	c9 f7       	brne	.-14     	; 0x63c <__fixunssfsi+0x12>
 64a:	12 c0       	rjmp	.+36     	; 0x670 <__fixunssfsi+0x46>
 64c:	b1 30       	cpi	r27, 0x01	; 1
 64e:	81 f0       	breq	.+32     	; 0x670 <__fixunssfsi+0x46>
 650:	9b d0       	rcall	.+310    	; 0x788 <__fp_zero>
 652:	b1 e0       	ldi	r27, 0x01	; 1
 654:	08 95       	ret
 656:	98 c0       	rjmp	.+304    	; 0x788 <__fp_zero>
 658:	67 2f       	mov	r22, r23
 65a:	78 2f       	mov	r23, r24
 65c:	88 27       	eor	r24, r24
 65e:	b8 5f       	subi	r27, 0xF8	; 248
 660:	39 f0       	breq	.+14     	; 0x670 <__fixunssfsi+0x46>
 662:	b9 3f       	cpi	r27, 0xF9	; 249
 664:	cc f3       	brlt	.-14     	; 0x658 <__fixunssfsi+0x2e>
 666:	86 95       	lsr	r24
 668:	77 95       	ror	r23
 66a:	67 95       	ror	r22
 66c:	b3 95       	inc	r27
 66e:	d9 f7       	brne	.-10     	; 0x666 <__fixunssfsi+0x3c>
 670:	3e f4       	brtc	.+14     	; 0x680 <__fixunssfsi+0x56>
 672:	90 95       	com	r25
 674:	80 95       	com	r24
 676:	70 95       	com	r23
 678:	61 95       	neg	r22
 67a:	7f 4f       	sbci	r23, 0xFF	; 255
 67c:	8f 4f       	sbci	r24, 0xFF	; 255
 67e:	9f 4f       	sbci	r25, 0xFF	; 255
 680:	08 95       	ret

00000682 <__floatunsisf>:
 682:	e8 94       	clt
 684:	09 c0       	rjmp	.+18     	; 0x698 <__floatsisf+0x12>

00000686 <__floatsisf>:
 686:	97 fb       	bst	r25, 7
 688:	3e f4       	brtc	.+14     	; 0x698 <__floatsisf+0x12>
 68a:	90 95       	com	r25
 68c:	80 95       	com	r24
 68e:	70 95       	com	r23
 690:	61 95       	neg	r22
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	8f 4f       	sbci	r24, 0xFF	; 255
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	99 23       	and	r25, r25
 69a:	a9 f0       	breq	.+42     	; 0x6c6 <__floatsisf+0x40>
 69c:	f9 2f       	mov	r31, r25
 69e:	96 e9       	ldi	r25, 0x96	; 150
 6a0:	bb 27       	eor	r27, r27
 6a2:	93 95       	inc	r25
 6a4:	f6 95       	lsr	r31
 6a6:	87 95       	ror	r24
 6a8:	77 95       	ror	r23
 6aa:	67 95       	ror	r22
 6ac:	b7 95       	ror	r27
 6ae:	f1 11       	cpse	r31, r1
 6b0:	f8 cf       	rjmp	.-16     	; 0x6a2 <__floatsisf+0x1c>
 6b2:	fa f4       	brpl	.+62     	; 0x6f2 <__floatsisf+0x6c>
 6b4:	bb 0f       	add	r27, r27
 6b6:	11 f4       	brne	.+4      	; 0x6bc <__floatsisf+0x36>
 6b8:	60 ff       	sbrs	r22, 0
 6ba:	1b c0       	rjmp	.+54     	; 0x6f2 <__floatsisf+0x6c>
 6bc:	6f 5f       	subi	r22, 0xFF	; 255
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	8f 4f       	sbci	r24, 0xFF	; 255
 6c2:	9f 4f       	sbci	r25, 0xFF	; 255
 6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <__floatsisf+0x6c>
 6c6:	88 23       	and	r24, r24
 6c8:	11 f0       	breq	.+4      	; 0x6ce <__floatsisf+0x48>
 6ca:	96 e9       	ldi	r25, 0x96	; 150
 6cc:	11 c0       	rjmp	.+34     	; 0x6f0 <__floatsisf+0x6a>
 6ce:	77 23       	and	r23, r23
 6d0:	21 f0       	breq	.+8      	; 0x6da <__floatsisf+0x54>
 6d2:	9e e8       	ldi	r25, 0x8E	; 142
 6d4:	87 2f       	mov	r24, r23
 6d6:	76 2f       	mov	r23, r22
 6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <__floatsisf+0x5e>
 6da:	66 23       	and	r22, r22
 6dc:	71 f0       	breq	.+28     	; 0x6fa <__floatsisf+0x74>
 6de:	96 e8       	ldi	r25, 0x86	; 134
 6e0:	86 2f       	mov	r24, r22
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	60 e0       	ldi	r22, 0x00	; 0
 6e6:	2a f0       	brmi	.+10     	; 0x6f2 <__floatsisf+0x6c>
 6e8:	9a 95       	dec	r25
 6ea:	66 0f       	add	r22, r22
 6ec:	77 1f       	adc	r23, r23
 6ee:	88 1f       	adc	r24, r24
 6f0:	da f7       	brpl	.-10     	; 0x6e8 <__floatsisf+0x62>
 6f2:	88 0f       	add	r24, r24
 6f4:	96 95       	lsr	r25
 6f6:	87 95       	ror	r24
 6f8:	97 f9       	bld	r25, 7
 6fa:	08 95       	ret

000006fc <__fp_cmp>:
 6fc:	99 0f       	add	r25, r25
 6fe:	00 08       	sbc	r0, r0
 700:	55 0f       	add	r21, r21
 702:	aa 0b       	sbc	r26, r26
 704:	e0 e8       	ldi	r30, 0x80	; 128
 706:	fe ef       	ldi	r31, 0xFE	; 254
 708:	16 16       	cp	r1, r22
 70a:	17 06       	cpc	r1, r23
 70c:	e8 07       	cpc	r30, r24
 70e:	f9 07       	cpc	r31, r25
 710:	c0 f0       	brcs	.+48     	; 0x742 <__fp_cmp+0x46>
 712:	12 16       	cp	r1, r18
 714:	13 06       	cpc	r1, r19
 716:	e4 07       	cpc	r30, r20
 718:	f5 07       	cpc	r31, r21
 71a:	98 f0       	brcs	.+38     	; 0x742 <__fp_cmp+0x46>
 71c:	62 1b       	sub	r22, r18
 71e:	73 0b       	sbc	r23, r19
 720:	84 0b       	sbc	r24, r20
 722:	95 0b       	sbc	r25, r21
 724:	39 f4       	brne	.+14     	; 0x734 <__fp_cmp+0x38>
 726:	0a 26       	eor	r0, r26
 728:	61 f0       	breq	.+24     	; 0x742 <__fp_cmp+0x46>
 72a:	23 2b       	or	r18, r19
 72c:	24 2b       	or	r18, r20
 72e:	25 2b       	or	r18, r21
 730:	21 f4       	brne	.+8      	; 0x73a <__fp_cmp+0x3e>
 732:	08 95       	ret
 734:	0a 26       	eor	r0, r26
 736:	09 f4       	brne	.+2      	; 0x73a <__fp_cmp+0x3e>
 738:	a1 40       	sbci	r26, 0x01	; 1
 73a:	a6 95       	lsr	r26
 73c:	8f ef       	ldi	r24, 0xFF	; 255
 73e:	81 1d       	adc	r24, r1
 740:	81 1d       	adc	r24, r1
 742:	08 95       	ret

00000744 <__fp_split3>:
 744:	57 fd       	sbrc	r21, 7
 746:	90 58       	subi	r25, 0x80	; 128
 748:	44 0f       	add	r20, r20
 74a:	55 1f       	adc	r21, r21
 74c:	59 f0       	breq	.+22     	; 0x764 <__fp_splitA+0x10>
 74e:	5f 3f       	cpi	r21, 0xFF	; 255
 750:	71 f0       	breq	.+28     	; 0x76e <__fp_splitA+0x1a>
 752:	47 95       	ror	r20

00000754 <__fp_splitA>:
 754:	88 0f       	add	r24, r24
 756:	97 fb       	bst	r25, 7
 758:	99 1f       	adc	r25, r25
 75a:	61 f0       	breq	.+24     	; 0x774 <__fp_splitA+0x20>
 75c:	9f 3f       	cpi	r25, 0xFF	; 255
 75e:	79 f0       	breq	.+30     	; 0x77e <__fp_splitA+0x2a>
 760:	87 95       	ror	r24
 762:	08 95       	ret
 764:	12 16       	cp	r1, r18
 766:	13 06       	cpc	r1, r19
 768:	14 06       	cpc	r1, r20
 76a:	55 1f       	adc	r21, r21
 76c:	f2 cf       	rjmp	.-28     	; 0x752 <__fp_split3+0xe>
 76e:	46 95       	lsr	r20
 770:	f1 df       	rcall	.-30     	; 0x754 <__fp_splitA>
 772:	08 c0       	rjmp	.+16     	; 0x784 <__fp_splitA+0x30>
 774:	16 16       	cp	r1, r22
 776:	17 06       	cpc	r1, r23
 778:	18 06       	cpc	r1, r24
 77a:	99 1f       	adc	r25, r25
 77c:	f1 cf       	rjmp	.-30     	; 0x760 <__fp_splitA+0xc>
 77e:	86 95       	lsr	r24
 780:	71 05       	cpc	r23, r1
 782:	61 05       	cpc	r22, r1
 784:	08 94       	sec
 786:	08 95       	ret

00000788 <__fp_zero>:
 788:	e8 94       	clt

0000078a <__fp_szero>:
 78a:	bb 27       	eor	r27, r27
 78c:	66 27       	eor	r22, r22
 78e:	77 27       	eor	r23, r23
 790:	cb 01       	movw	r24, r22
 792:	97 f9       	bld	r25, 7
 794:	08 95       	ret

00000796 <__gesf2>:
 796:	b2 df       	rcall	.-156    	; 0x6fc <__fp_cmp>
 798:	08 f4       	brcc	.+2      	; 0x79c <__gesf2+0x6>
 79a:	8f ef       	ldi	r24, 0xFF	; 255
 79c:	08 95       	ret

0000079e <__mulsf3>:
 79e:	0b d0       	rcall	.+22     	; 0x7b6 <__mulsf3x>
 7a0:	78 c0       	rjmp	.+240    	; 0x892 <__fp_round>
 7a2:	69 d0       	rcall	.+210    	; 0x876 <__fp_pscA>
 7a4:	28 f0       	brcs	.+10     	; 0x7b0 <__mulsf3+0x12>
 7a6:	6e d0       	rcall	.+220    	; 0x884 <__fp_pscB>
 7a8:	18 f0       	brcs	.+6      	; 0x7b0 <__mulsf3+0x12>
 7aa:	95 23       	and	r25, r21
 7ac:	09 f0       	breq	.+2      	; 0x7b0 <__mulsf3+0x12>
 7ae:	5a c0       	rjmp	.+180    	; 0x864 <__fp_inf>
 7b0:	5f c0       	rjmp	.+190    	; 0x870 <__fp_nan>
 7b2:	11 24       	eor	r1, r1
 7b4:	ea cf       	rjmp	.-44     	; 0x78a <__fp_szero>

000007b6 <__mulsf3x>:
 7b6:	c6 df       	rcall	.-116    	; 0x744 <__fp_split3>
 7b8:	a0 f3       	brcs	.-24     	; 0x7a2 <__mulsf3+0x4>

000007ba <__mulsf3_pse>:
 7ba:	95 9f       	mul	r25, r21
 7bc:	d1 f3       	breq	.-12     	; 0x7b2 <__mulsf3+0x14>
 7be:	95 0f       	add	r25, r21
 7c0:	50 e0       	ldi	r21, 0x00	; 0
 7c2:	55 1f       	adc	r21, r21
 7c4:	62 9f       	mul	r22, r18
 7c6:	f0 01       	movw	r30, r0
 7c8:	72 9f       	mul	r23, r18
 7ca:	bb 27       	eor	r27, r27
 7cc:	f0 0d       	add	r31, r0
 7ce:	b1 1d       	adc	r27, r1
 7d0:	63 9f       	mul	r22, r19
 7d2:	aa 27       	eor	r26, r26
 7d4:	f0 0d       	add	r31, r0
 7d6:	b1 1d       	adc	r27, r1
 7d8:	aa 1f       	adc	r26, r26
 7da:	64 9f       	mul	r22, r20
 7dc:	66 27       	eor	r22, r22
 7de:	b0 0d       	add	r27, r0
 7e0:	a1 1d       	adc	r26, r1
 7e2:	66 1f       	adc	r22, r22
 7e4:	82 9f       	mul	r24, r18
 7e6:	22 27       	eor	r18, r18
 7e8:	b0 0d       	add	r27, r0
 7ea:	a1 1d       	adc	r26, r1
 7ec:	62 1f       	adc	r22, r18
 7ee:	73 9f       	mul	r23, r19
 7f0:	b0 0d       	add	r27, r0
 7f2:	a1 1d       	adc	r26, r1
 7f4:	62 1f       	adc	r22, r18
 7f6:	83 9f       	mul	r24, r19
 7f8:	a0 0d       	add	r26, r0
 7fa:	61 1d       	adc	r22, r1
 7fc:	22 1f       	adc	r18, r18
 7fe:	74 9f       	mul	r23, r20
 800:	33 27       	eor	r19, r19
 802:	a0 0d       	add	r26, r0
 804:	61 1d       	adc	r22, r1
 806:	23 1f       	adc	r18, r19
 808:	84 9f       	mul	r24, r20
 80a:	60 0d       	add	r22, r0
 80c:	21 1d       	adc	r18, r1
 80e:	82 2f       	mov	r24, r18
 810:	76 2f       	mov	r23, r22
 812:	6a 2f       	mov	r22, r26
 814:	11 24       	eor	r1, r1
 816:	9f 57       	subi	r25, 0x7F	; 127
 818:	50 40       	sbci	r21, 0x00	; 0
 81a:	8a f0       	brmi	.+34     	; 0x83e <__mulsf3_pse+0x84>
 81c:	e1 f0       	breq	.+56     	; 0x856 <__mulsf3_pse+0x9c>
 81e:	88 23       	and	r24, r24
 820:	4a f0       	brmi	.+18     	; 0x834 <__mulsf3_pse+0x7a>
 822:	ee 0f       	add	r30, r30
 824:	ff 1f       	adc	r31, r31
 826:	bb 1f       	adc	r27, r27
 828:	66 1f       	adc	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	88 1f       	adc	r24, r24
 82e:	91 50       	subi	r25, 0x01	; 1
 830:	50 40       	sbci	r21, 0x00	; 0
 832:	a9 f7       	brne	.-22     	; 0x81e <__mulsf3_pse+0x64>
 834:	9e 3f       	cpi	r25, 0xFE	; 254
 836:	51 05       	cpc	r21, r1
 838:	70 f0       	brcs	.+28     	; 0x856 <__mulsf3_pse+0x9c>
 83a:	14 c0       	rjmp	.+40     	; 0x864 <__fp_inf>
 83c:	a6 cf       	rjmp	.-180    	; 0x78a <__fp_szero>
 83e:	5f 3f       	cpi	r21, 0xFF	; 255
 840:	ec f3       	brlt	.-6      	; 0x83c <__mulsf3_pse+0x82>
 842:	98 3e       	cpi	r25, 0xE8	; 232
 844:	dc f3       	brlt	.-10     	; 0x83c <__mulsf3_pse+0x82>
 846:	86 95       	lsr	r24
 848:	77 95       	ror	r23
 84a:	67 95       	ror	r22
 84c:	b7 95       	ror	r27
 84e:	f7 95       	ror	r31
 850:	e7 95       	ror	r30
 852:	9f 5f       	subi	r25, 0xFF	; 255
 854:	c1 f7       	brne	.-16     	; 0x846 <__mulsf3_pse+0x8c>
 856:	fe 2b       	or	r31, r30
 858:	88 0f       	add	r24, r24
 85a:	91 1d       	adc	r25, r1
 85c:	96 95       	lsr	r25
 85e:	87 95       	ror	r24
 860:	97 f9       	bld	r25, 7
 862:	08 95       	ret

00000864 <__fp_inf>:
 864:	97 f9       	bld	r25, 7
 866:	9f 67       	ori	r25, 0x7F	; 127
 868:	80 e8       	ldi	r24, 0x80	; 128
 86a:	70 e0       	ldi	r23, 0x00	; 0
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	08 95       	ret

00000870 <__fp_nan>:
 870:	9f ef       	ldi	r25, 0xFF	; 255
 872:	80 ec       	ldi	r24, 0xC0	; 192
 874:	08 95       	ret

00000876 <__fp_pscA>:
 876:	00 24       	eor	r0, r0
 878:	0a 94       	dec	r0
 87a:	16 16       	cp	r1, r22
 87c:	17 06       	cpc	r1, r23
 87e:	18 06       	cpc	r1, r24
 880:	09 06       	cpc	r0, r25
 882:	08 95       	ret

00000884 <__fp_pscB>:
 884:	00 24       	eor	r0, r0
 886:	0a 94       	dec	r0
 888:	12 16       	cp	r1, r18
 88a:	13 06       	cpc	r1, r19
 88c:	14 06       	cpc	r1, r20
 88e:	05 06       	cpc	r0, r21
 890:	08 95       	ret

00000892 <__fp_round>:
 892:	09 2e       	mov	r0, r25
 894:	03 94       	inc	r0
 896:	00 0c       	add	r0, r0
 898:	11 f4       	brne	.+4      	; 0x89e <__fp_round+0xc>
 89a:	88 23       	and	r24, r24
 89c:	52 f0       	brmi	.+20     	; 0x8b2 <__fp_round+0x20>
 89e:	bb 0f       	add	r27, r27
 8a0:	40 f4       	brcc	.+16     	; 0x8b2 <__fp_round+0x20>
 8a2:	bf 2b       	or	r27, r31
 8a4:	11 f4       	brne	.+4      	; 0x8aa <__fp_round+0x18>
 8a6:	60 ff       	sbrs	r22, 0
 8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__fp_round+0x20>
 8aa:	6f 5f       	subi	r22, 0xFF	; 255
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	8f 4f       	sbci	r24, 0xFF	; 255
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	08 95       	ret

000008b4 <__divmodsi4>:
 8b4:	05 2e       	mov	r0, r21
 8b6:	97 fb       	bst	r25, 7
 8b8:	16 f4       	brtc	.+4      	; 0x8be <__divmodsi4+0xa>
 8ba:	00 94       	com	r0
 8bc:	0f d0       	rcall	.+30     	; 0x8dc <__negsi2>
 8be:	57 fd       	sbrc	r21, 7
 8c0:	05 d0       	rcall	.+10     	; 0x8cc <__divmodsi4_neg2>
 8c2:	23 d0       	rcall	.+70     	; 0x90a <__udivmodsi4>
 8c4:	07 fc       	sbrc	r0, 7
 8c6:	02 d0       	rcall	.+4      	; 0x8cc <__divmodsi4_neg2>
 8c8:	46 f4       	brtc	.+16     	; 0x8da <__divmodsi4_exit>
 8ca:	08 c0       	rjmp	.+16     	; 0x8dc <__negsi2>

000008cc <__divmodsi4_neg2>:
 8cc:	50 95       	com	r21
 8ce:	40 95       	com	r20
 8d0:	30 95       	com	r19
 8d2:	21 95       	neg	r18
 8d4:	3f 4f       	sbci	r19, 0xFF	; 255
 8d6:	4f 4f       	sbci	r20, 0xFF	; 255
 8d8:	5f 4f       	sbci	r21, 0xFF	; 255

000008da <__divmodsi4_exit>:
 8da:	08 95       	ret

000008dc <__negsi2>:
 8dc:	90 95       	com	r25
 8de:	80 95       	com	r24
 8e0:	70 95       	com	r23
 8e2:	61 95       	neg	r22
 8e4:	7f 4f       	sbci	r23, 0xFF	; 255
 8e6:	8f 4f       	sbci	r24, 0xFF	; 255
 8e8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ea:	08 95       	ret

000008ec <__umulhisi3>:
 8ec:	a2 9f       	mul	r26, r18
 8ee:	b0 01       	movw	r22, r0
 8f0:	b3 9f       	mul	r27, r19
 8f2:	c0 01       	movw	r24, r0
 8f4:	a3 9f       	mul	r26, r19
 8f6:	70 0d       	add	r23, r0
 8f8:	81 1d       	adc	r24, r1
 8fa:	11 24       	eor	r1, r1
 8fc:	91 1d       	adc	r25, r1
 8fe:	b2 9f       	mul	r27, r18
 900:	70 0d       	add	r23, r0
 902:	81 1d       	adc	r24, r1
 904:	11 24       	eor	r1, r1
 906:	91 1d       	adc	r25, r1
 908:	08 95       	ret

0000090a <__udivmodsi4>:
 90a:	a1 e2       	ldi	r26, 0x21	; 33
 90c:	1a 2e       	mov	r1, r26
 90e:	aa 1b       	sub	r26, r26
 910:	bb 1b       	sub	r27, r27
 912:	fd 01       	movw	r30, r26
 914:	0d c0       	rjmp	.+26     	; 0x930 <__udivmodsi4_ep>

00000916 <__udivmodsi4_loop>:
 916:	aa 1f       	adc	r26, r26
 918:	bb 1f       	adc	r27, r27
 91a:	ee 1f       	adc	r30, r30
 91c:	ff 1f       	adc	r31, r31
 91e:	a2 17       	cp	r26, r18
 920:	b3 07       	cpc	r27, r19
 922:	e4 07       	cpc	r30, r20
 924:	f5 07       	cpc	r31, r21
 926:	20 f0       	brcs	.+8      	; 0x930 <__udivmodsi4_ep>
 928:	a2 1b       	sub	r26, r18
 92a:	b3 0b       	sbc	r27, r19
 92c:	e4 0b       	sbc	r30, r20
 92e:	f5 0b       	sbc	r31, r21

00000930 <__udivmodsi4_ep>:
 930:	66 1f       	adc	r22, r22
 932:	77 1f       	adc	r23, r23
 934:	88 1f       	adc	r24, r24
 936:	99 1f       	adc	r25, r25
 938:	1a 94       	dec	r1
 93a:	69 f7       	brne	.-38     	; 0x916 <__udivmodsi4_loop>
 93c:	60 95       	com	r22
 93e:	70 95       	com	r23
 940:	80 95       	com	r24
 942:	90 95       	com	r25
 944:	9b 01       	movw	r18, r22
 946:	ac 01       	movw	r20, r24
 948:	bd 01       	movw	r22, r26
 94a:	cf 01       	movw	r24, r30
 94c:	08 95       	ret

0000094e <_exit>:
 94e:	f8 94       	cli

00000950 <__stop_program>:
 950:	ff cf       	rjmp	.-2      	; 0x950 <__stop_program>
