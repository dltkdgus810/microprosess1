
timer2_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a2  00800200  000008f2  00000986  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  008004a2  008004a2  00000c28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001221  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d13  00000000  00000000  00001f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c9  00000000  00000000  00002c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00003460  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068a  00000000  00000000  00003618  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000448  00000000  00000000  00003ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000040ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__bad_interrupt>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	00 00       	nop
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	00 00       	nop
  10:	6d c1       	rjmp	.+730    	; 0x2ec <__vector_4>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c1       	rjmp	.+620    	; 0x28e <__vector_8>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	50 c0       	rjmp	.+160    	; 0x106 <__bad_interrupt>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3c c0       	rjmp	.+120    	; 0x106 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3a c0       	rjmp	.+116    	; 0x106 <__bad_interrupt>
  92:	00 00       	nop
  94:	38 c0       	rjmp	.+112    	; 0x106 <__bad_interrupt>
  96:	00 00       	nop
  98:	36 c0       	rjmp	.+108    	; 0x106 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	34 c0       	rjmp	.+104    	; 0x106 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	32 c0       	rjmp	.+100    	; 0x106 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	30 c0       	rjmp	.+96     	; 0x106 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2e c0       	rjmp	.+92     	; 0x106 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2c c0       	rjmp	.+88     	; 0x106 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2a c0       	rjmp	.+84     	; 0x106 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	28 c0       	rjmp	.+80     	; 0x106 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	26 c0       	rjmp	.+76     	; 0x106 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	29 c1       	rjmp	.+594    	; 0x310 <__vector_47>
  be:	00 00       	nop
  c0:	22 c0       	rjmp	.+68     	; 0x106 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	20 c0       	rjmp	.+64     	; 0x106 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1e c0       	rjmp	.+60     	; 0x106 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	14 e0       	ldi	r17, 0x04	; 4
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	e2 ef       	ldi	r30, 0xF2	; 242
  e0:	f8 e0       	ldi	r31, 0x08	; 8
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a2 3a       	cpi	r26, 0xA2	; 162
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	24 e0       	ldi	r18, 0x04	; 4
  f4:	a2 ea       	ldi	r26, 0xA2	; 162
  f6:	b4 e0       	ldi	r27, 0x04	; 4
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	a9 3a       	cpi	r26, 0xA9	; 169
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	6c d1       	rcall	.+728    	; 0x3dc <main>
 104:	f4 c3       	rjmp	.+2024   	; 0x8ee <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <fnd_write>:
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline void fnd_clear(uint8_t fnd_num)
{
    fnd_write(fnd_num, 0);
 108:	9f b7       	in	r25, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	84 bb       	out	0x14, r24	; 20
 10e:	68 b9       	out	0x08, r22	; 8
 110:	87 e0       	ldi	r24, 0x07	; 7
 112:	84 bb       	out	0x14, r24	; 20
 114:	99 23       	and	r25, r25
 116:	0c f4       	brge	.+2      	; 0x11a <fnd_write+0x12>
 118:	78 94       	sei
 11a:	08 95       	ret

0000011c <fnd_clear_all>:
/* ----------------------------------------------------------------------------
 * clear all FNDs 
 * -------------------------------------------------------------------------- */
void fnd_clear_all(void)
{
    fnd_write(0, 0);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	f3 df       	rcall	.-26     	; 0x108 <fnd_write>
    fnd_write(1, 0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	f0 df       	rcall	.-32     	; 0x108 <fnd_write>
    fnd_write(2, 0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	ed cf       	rjmp	.-38     	; 0x108 <fnd_write>
 12e:	08 95       	ret

00000130 <fnd_write_number>:
{
    static uint8_t num_code[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x6f,
                                  0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71};
    uint8_t value;
    
    value = num_code[num] | (dot_on<<7);
 130:	e6 2f       	mov	r30, r22
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ee 56       	subi	r30, 0x6E	; 110
 136:	fb 4f       	sbci	r31, 0xFB	; 251
    fnd_write(fnd_num, value);    
 138:	90 e8       	ldi	r25, 0x80	; 128
 13a:	49 9f       	mul	r20, r25
 13c:	a0 01       	movw	r20, r0
 13e:	11 24       	eor	r1, r1
 140:	60 81       	ld	r22, Z
 142:	64 2b       	or	r22, r20
 144:	e1 cf       	rjmp	.-62     	; 0x108 <fnd_write>
 146:	08 95       	ret

00000148 <fnd_write_numbers>:
}

void fnd_write_numbers(uint16_t num)
{
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	8c 01       	movw	r16, r24
	uint16_t a = num%10;
 152:	9c 01       	movw	r18, r24
 154:	ad ec       	ldi	r26, 0xCD	; 205
 156:	bc ec       	ldi	r27, 0xCC	; 204
 158:	99 d3       	rcall	.+1842   	; 0x88c <__umulhisi3>
 15a:	fc 01       	movw	r30, r24
 15c:	f6 95       	lsr	r31
 15e:	e7 95       	ror	r30
 160:	f6 95       	lsr	r31
 162:	e7 95       	ror	r30
 164:	f6 95       	lsr	r31
 166:	e7 95       	ror	r30
 168:	cf 01       	movw	r24, r30
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e8 0f       	add	r30, r24
 17c:	f9 1f       	adc	r31, r25
 17e:	c8 01       	movw	r24, r16
 180:	8e 1b       	sub	r24, r30
 182:	9f 0b       	sbc	r25, r31
 184:	fc 01       	movw	r30, r24
	uint16_t b = (num/10)%10;
 186:	82 d3       	rcall	.+1796   	; 0x88c <__umulhisi3>
 188:	ac 01       	movw	r20, r24
 18a:	56 95       	lsr	r21
 18c:	47 95       	ror	r20
 18e:	56 95       	lsr	r21
 190:	47 95       	ror	r20
 192:	56 95       	lsr	r21
 194:	47 95       	ror	r20
 196:	9a 01       	movw	r18, r20
 198:	79 d3       	rcall	.+1778   	; 0x88c <__umulhisi3>
 19a:	ec 01       	movw	r28, r24
 19c:	d6 95       	lsr	r29
 19e:	c7 95       	ror	r28
 1a0:	d6 95       	lsr	r29
 1a2:	c7 95       	ror	r28
 1a4:	d6 95       	lsr	r29
 1a6:	c7 95       	ror	r28
 1a8:	ce 01       	movw	r24, r28
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	cc 0f       	add	r28, r28
 1b0:	dd 1f       	adc	r29, r29
 1b2:	cc 0f       	add	r28, r28
 1b4:	dd 1f       	adc	r29, r29
 1b6:	cc 0f       	add	r28, r28
 1b8:	dd 1f       	adc	r29, r29
 1ba:	c8 0f       	add	r28, r24
 1bc:	d9 1f       	adc	r29, r25
 1be:	ca 01       	movw	r24, r20
 1c0:	8c 1b       	sub	r24, r28
 1c2:	9d 0b       	sbc	r25, r29
 1c4:	ec 01       	movw	r28, r24
 1c6:	0a 30       	cpi	r16, 0x0A	; 10
	uint16_t c = (num/100)%10;
	
	if(num<10)
 1c8:	11 05       	cpc	r17, r1
 1ca:	58 f4       	brcc	.+22     	; 0x1e2 <fnd_write_numbers+0x9a>
 1cc:	40 e0       	ldi	r20, 0x00	; 0
	{
		fnd_write_number(0,a,0);
 1ce:	6e 2f       	mov	r22, r30
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	ae df       	rcall	.-164    	; 0x130 <fnd_write_number>
		fnd_write(1,0);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	97 df       	rcall	.-210    	; 0x108 <fnd_write>
		fnd_write(2,0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	94 df       	rcall	.-216    	; 0x108 <fnd_write>
 1e0:	3d c0       	rjmp	.+122    	; 0x25c <fnd_write_numbers+0x114>
 1e2:	04 36       	cpi	r16, 0x64	; 100
	}
	else if(num<100)
 1e4:	11 05       	cpc	r17, r1
 1e6:	60 f4       	brcc	.+24     	; 0x200 <fnd_write_numbers+0xb8>
	{
		fnd_write_number(0,a,0);
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	6e 2f       	mov	r22, r30
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	a0 df       	rcall	.-192    	; 0x130 <fnd_write_number>
		fnd_write_number(1,b,0);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	6c 2f       	mov	r22, r28
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	9c df       	rcall	.-200    	; 0x130 <fnd_write_number>
		fnd_write(2,0);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	85 df       	rcall	.-246    	; 0x108 <fnd_write>
 1fe:	2e c0       	rjmp	.+92     	; 0x25c <fnd_write_numbers+0x114>
	}
	else
	{
		fnd_write_number(0,a,0);
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	6e 2f       	mov	r22, r30
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	94 df       	rcall	.-216    	; 0x130 <fnd_write_number>
 208:	40 e0       	ldi	r20, 0x00	; 0
		fnd_write_number(1,b,0);
 20a:	6c 2f       	mov	r22, r28
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 df       	rcall	.-224    	; 0x130 <fnd_write_number>
 210:	98 01       	movw	r18, r16
		fnd_write_number(2,c,0);
 212:	36 95       	lsr	r19
 214:	27 95       	ror	r18
 216:	36 95       	lsr	r19
 218:	27 95       	ror	r18
 21a:	ab e7       	ldi	r26, 0x7B	; 123
 21c:	b4 e1       	ldi	r27, 0x14	; 20
 21e:	36 d3       	rcall	.+1644   	; 0x88c <__umulhisi3>
 220:	ac 01       	movw	r20, r24
 222:	56 95       	lsr	r21
 224:	47 95       	ror	r20
 226:	9a 01       	movw	r18, r20
 228:	ad ec       	ldi	r26, 0xCD	; 205
 22a:	bc ec       	ldi	r27, 0xCC	; 204
 22c:	2f d3       	rcall	.+1630   	; 0x88c <__umulhisi3>
 22e:	96 95       	lsr	r25
 230:	87 95       	ror	r24
 232:	96 95       	lsr	r25
 234:	87 95       	ror	r24
 236:	96 95       	lsr	r25
 238:	87 95       	ror	r24
 23a:	9c 01       	movw	r18, r24
 23c:	22 0f       	add	r18, r18
 23e:	33 1f       	adc	r19, r19
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	82 0f       	add	r24, r18
 24e:	93 1f       	adc	r25, r19
 250:	ba 01       	movw	r22, r20
 252:	68 1b       	sub	r22, r24
 254:	79 0b       	sbc	r23, r25
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	6a df       	rcall	.-300    	; 0x130 <fnd_write_number>
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
	}
	
}
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	08 95       	ret

00000266 <led_write>:
 266:	9f b7       	in	r25, 0x3f	; 63
 268:	f8 94       	cli
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline static void fnd_select(uint8_t fnd_num)
{
    PORTG = fnd_num;
 26a:	23 e0       	ldi	r18, 0x03	; 3
 26c:	24 bb       	out	0x14, r18	; 20
    
    sreg = SREG;            // save SREG
    cli();                  // disable interrupt to prevent shared-data problem

    fnd_select(3);
    PORTC = value;
 26e:	88 b9       	out	0x08, r24	; 8
/* ----------------------------------------------------------------------------
 * deselect selected FND
 * -------------------------------------------------------------------------- */
inline static void fnd_deselect(void)
{
    PORTG = 0x07;
 270:	87 e0       	ldi	r24, 0x07	; 7
 272:	84 bb       	out	0x14, r24	; 20

    fnd_select(3);
    PORTC = value;
    fnd_deselect();

    if(sreg&0x80)           // if global interrupt was enabled before executing cli()
 274:	99 23       	and	r25, r25
 276:	0c f4       	brge	.+2      	; 0x27a <led_write+0x14>
        sei();              // enable interrupt        
 278:	78 94       	sei
 27a:	08 95       	ret

0000027c <fnd_init>:
 * initialize port for FND/LED interface
 * -------------------------------------------------------------------------- */
inline static void fnd_port_init(void)
{
    // configure output
    DDRC = 0xff;            // PORTC[7..0]
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	87 b9       	out	0x07, r24	; 7
    DDRG = 0x07;            // PORTG[2..0]
 280:	87 e0       	ldi	r24, 0x07	; 7
 282:	83 bb       	out	0x13, r24	; 19
    DDRB |= _BV(LED_COLOR);
 284:	24 9a       	sbi	0x04, 4	; 4
 * initialize FND/LED
 * -------------------------------------------------------------------------- */
void fnd_init(void)
{
    fnd_port_init();
    fnd_clear_all();
 286:	4a df       	rcall	.-364    	; 0x11c <fnd_clear_all>
    led_write(0xff);
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	ed cf       	rjmp	.-38     	; 0x266 <led_write>
 28c:	08 95       	ret

0000028e <__vector_8>:
static uint8_t SW2_hit = 0;



ISR(INT7_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
	SW2_hit++;
 29c:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <__data_end>
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <__data_end>
	if (SW2_hit>=2 && !(SW2_hit%2))
 2a6:	82 30       	cpi	r24, 0x02	; 2
 2a8:	58 f0       	brcs	.+22     	; 0x2c0 <__vector_8+0x32>
 2aa:	80 fd       	sbrc	r24, 0
 2ac:	16 c0       	rjmp	.+44     	; 0x2da <__vector_8+0x4c>
	{
		fnd_num_stop = fnd_num;
 2ae:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <fnd_num>
 2b2:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <fnd_num+0x1>
 2b6:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <fnd_num_stop+0x1>
 2ba:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <fnd_num_stop>
 2be:	0f c0       	rjmp	.+30     	; 0x2de <__vector_8+0x50>
	}
	if (SW2_hit>=3 && SW2_hit%2)
 2c0:	83 30       	cpi	r24, 0x03	; 3
 2c2:	68 f0       	brcs	.+26     	; 0x2de <__vector_8+0x50>
 2c4:	80 ff       	sbrs	r24, 0
 2c6:	0b c0       	rjmp	.+22     	; 0x2de <__vector_8+0x50>
	{
		fnd_num = fnd_num_stop;
 2c8:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <fnd_num_stop>
 2cc:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <fnd_num_stop+0x1>
 2d0:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <fnd_num+0x1>
 2d4:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <fnd_num>
	}
	
}
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <__vector_8+0x50>
	SW2_hit++;
	if (SW2_hit>=2 && !(SW2_hit%2))
	{
		fnd_num_stop = fnd_num;
	}
	if (SW2_hit>=3 && SW2_hit%2)
 2da:	83 30       	cpi	r24, 0x03	; 3
 2dc:	a8 f7       	brcc	.-22     	; 0x2c8 <__vector_8+0x3a>
	{
		fnd_num = fnd_num_stop;
	}
	
}
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <__vector_4>:

ISR(INT3_vect)
{
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
	asdf = 0;
 2f6:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <asdf+0x1>
 2fa:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <asdf>
	fnd_num = 0;
 2fe:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <fnd_num+0x1>
 302:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <fnd_num>
}
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <__vector_47>:

ISR(TIMER5_COMPA_vect, ISR_NOBLOCK)
{
 310:	78 94       	sei
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	0b b6       	in	r0, 0x3b	; 59
 31e:	0f 92       	push	r0
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	5f 93       	push	r21
 328:	6f 93       	push	r22
 32a:	7f 93       	push	r23
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	af 93       	push	r26
 332:	bf 93       	push	r27
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
	fnd_num++;
 338:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <fnd_num>
 33c:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <fnd_num+0x1>
 340:	01 96       	adiw	r24, 0x01	; 1
	if(fnd_num == 1000)
 342:	88 3e       	cpi	r24, 0xE8	; 232
 344:	23 e0       	ldi	r18, 0x03	; 3
 346:	92 07       	cpc	r25, r18
 348:	29 f0       	breq	.+10     	; 0x354 <__vector_47+0x44>
	fnd_num = 0;
}

ISR(TIMER5_COMPA_vect, ISR_NOBLOCK)
{
	fnd_num++;
 34a:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <fnd_num+0x1>
 34e:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <fnd_num>
 352:	04 c0       	rjmp	.+8      	; 0x35c <__vector_47+0x4c>
	if(fnd_num == 1000)
	{
		fnd_num = 0;
 354:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <fnd_num+0x1>
 358:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <fnd_num>
	}
	fnd_write_numbers(fnd_num);
 35c:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <fnd_num>
 360:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <fnd_num+0x1>
 364:	f1 de       	rcall	.-542    	; 0x148 <fnd_write_numbers>
}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	bf 91       	pop	r27
 36c:	af 91       	pop	r26
 36e:	9f 91       	pop	r25
 370:	8f 91       	pop	r24
 372:	7f 91       	pop	r23
 374:	6f 91       	pop	r22
 376:	5f 91       	pop	r21
 378:	4f 91       	pop	r20
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0b be       	out	0x3b, r0	; 59
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <ioport_init>:


void ioport_init(void)
{
	//DDRC의 하위 4bit을 출력하는 단자로 만든다.
	DDRC = _BV(LED1) | _BV(LED2) | _BV(LED3) | _BV(LED4);
 38c:	8f e0       	ldi	r24, 0x0F	; 15
 38e:	87 b9       	out	0x07, r24	; 7
	//MCU의 LED보드 4개의 불을 끈다.
	PORTC = 0xff;
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	88 b9       	out	0x08, r24	; 8
	//MCU 보드의 SW2의 내부 pull-up저항을 활성화 한다.
	PORTE = _BV(SW2);
 394:	80 e8       	ldi	r24, 0x80	; 128
 396:	8e b9       	out	0x0e, r24	; 14
	//확장 보드의 SW3의 내부 pull-up저항을 활성화 한다.
	PORTD = _BV(SW3);
 398:	88 e0       	ldi	r24, 0x08	; 8
 39a:	8b b9       	out	0x0b, r24	; 11
	
	DDRE = _BV(SOUND_OUT);
 39c:	8d b9       	out	0x0d, r24	; 13
	DDRB = _BV(PB4);
 39e:	80 e1       	ldi	r24, 0x10	; 16
 3a0:	84 b9       	out	0x04, r24	; 4
 3a2:	08 95       	ret

000003a4 <interrupt_init>:
}
void interrupt_init(void)
{
	// 하강 모서리 (falling edge)에서 INT3이발생하도록 EICRA를설정한다.
	EICRA = _BV(ISC31);
 3a4:	80 e8       	ldi	r24, 0x80	; 128
 3a6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	// 하강 모서리 (falling edge)에서 INT7이발생하도록 EICRB를설정한다.
	EICRB = _BV(ISC71);
 3aa:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	// INT3과 INT7을 enable시킨다.
	EIMSK = _BV(INT7) | _BV(INT3);
 3ae:	88 e8       	ldi	r24, 0x88	; 136
 3b0:	8d bb       	out	0x1d, r24	; 29
	// global interrupt flag을 set시킨다.
	sei();
 3b2:	78 94       	sei
 3b4:	08 95       	ret

000003b6 <timer_init>:
}
void timer_init(void)
{
	// Timer3을 CTC 모드로 설정
	TCCR3B = _BV(WGM32);
 3b6:	88 e0       	ldi	r24, 0x08	; 8
 3b8:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	//compare match가 발생할 때마다 OC3A 핀을 toggle시키도록 설정한다.
	TCCR3A = _BV(COM3A0);
 3bc:	80 e4       	ldi	r24, 0x40	; 64
 3be:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	// Timer5을 CTC 모드로 설정
	TCCR5B = _BV(WGM52) | _BV(CS50) | _BV(CS51);
 3c2:	8b e0       	ldi	r24, 0x0B	; 11
 3c4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x7e0121>
	//0.1 초 간격으로 compare match interrupt가 발생하도록 설정한다.
	OCR5A = (F_CPU/(64*10))-1;
 3c8:	87 ea       	ldi	r24, 0xA7	; 167
 3ca:	91 e6       	ldi	r25, 0x61	; 97
 3cc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7e0129>
 3d0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7e0128>
	//timer5번의 compare match interrupt enable.
	TIMSK5 = _BV(OCIE5A);
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 3da:	08 95       	ret

000003dc <main>:
	fnd_write_numbers(fnd_num);
}

int main(void)
{
	ioport_init();
 3dc:	d7 df       	rcall	.-82     	; 0x38c <ioport_init>
	timer_init();
 3de:	eb df       	rcall	.-42     	; 0x3b6 <timer_init>
	interrupt_init();
 3e0:	e1 df       	rcall	.-62     	; 0x3a4 <interrupt_init>
 3e2:	4c df       	rcall	.-360    	; 0x27c <fnd_init>
	fnd_init();
 3e4:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <fnd_num>
	
	fnd_write_numbers(fnd_num);
 3e8:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <fnd_num+0x1>
 3ec:	ad de       	rcall	.-678    	; 0x148 <fnd_write_numbers>
 3ee:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <asdf+0x1>
	uint16_t m_duration_size = sizeof(m_duration) / sizeof(uint8_t);
	
	
	uint16_t m_duration_real = 0;
	
	asdf=0;
 3f2:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <asdf>
 3f6:	1b ed       	ldi	r17, 0xDB	; 219
 3f8:	ff 24       	eor	r15, r15
	while(1)
	{
		
		if (SW2_hit%2)
		{
			if (!m_notes[asdf%m_notes_size])
 3fa:	f3 94       	inc	r15

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 3fc:	00 e0       	ldi	r16, 0x00	; 0
 3fe:	c0 e9       	ldi	r28, 0x90	; 144
 400:	d1 e0       	ldi	r29, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 402:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <__data_end>
	/* Replace with your application code */
	
	while(1)
	{
		
		if (SW2_hit%2)
 406:	80 ff       	sbrs	r24, 0
 408:	ab c0       	rjmp	.+342    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 40a:	40 91 a7 04 	lds	r20, 0x04A7	; 0x8004a7 <asdf>
		{
			if (!m_notes[asdf%m_notes_size])
 40e:	50 91 a8 04 	lds	r21, 0x04A8	; 0x8004a8 <asdf+0x1>
 412:	9a 01       	movw	r18, r20
 414:	a1 e4       	ldi	r26, 0x41	; 65
 416:	bb e2       	ldi	r27, 0x2B	; 43
 418:	39 d2       	rcall	.+1138   	; 0x88c <__umulhisi3>
 41a:	28 1b       	sub	r18, r24
 41c:	39 0b       	sbc	r19, r25
 41e:	36 95       	lsr	r19
 420:	27 95       	ror	r18
 422:	82 0f       	add	r24, r18
 424:	93 1f       	adc	r25, r19
 426:	88 0f       	add	r24, r24
 428:	89 2f       	mov	r24, r25
 42a:	88 1f       	adc	r24, r24
 42c:	99 0b       	sbc	r25, r25
 42e:	91 95       	neg	r25
 430:	18 9f       	mul	r17, r24
 432:	90 01       	movw	r18, r0
 434:	19 9f       	mul	r17, r25
 436:	30 0d       	add	r19, r0
 438:	11 24       	eor	r1, r1
 43a:	fa 01       	movw	r30, r20
 43c:	e2 1b       	sub	r30, r18
 43e:	f3 0b       	sbc	r31, r19
 440:	ee 0f       	add	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	e5 52       	subi	r30, 0x25	; 37
 446:	fd 4f       	sbci	r31, 0xFD	; 253
 448:	80 81       	ld	r24, Z
 44a:	91 81       	ldd	r25, Z+1	; 0x01
 44c:	89 2b       	or	r24, r25
 44e:	11 f4       	brne	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 450:	ad d0       	rcall	.+346    	; 0x5ac <sound_mute>
			{
				sound_mute();
 452:	22 c0       	rjmp	.+68     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 454:	40 91 a7 04 	lds	r20, 0x04A7	; 0x8004a7 <asdf>
			}
			else
			{
				sound_set_frequency(m_notes[asdf%m_notes_size]);
 458:	50 91 a8 04 	lds	r21, 0x04A8	; 0x8004a8 <asdf+0x1>
 45c:	9a 01       	movw	r18, r20
 45e:	a1 e4       	ldi	r26, 0x41	; 65
 460:	bb e2       	ldi	r27, 0x2B	; 43
 462:	14 d2       	rcall	.+1064   	; 0x88c <__umulhisi3>
 464:	28 1b       	sub	r18, r24
 466:	39 0b       	sbc	r19, r25
 468:	36 95       	lsr	r19
 46a:	27 95       	ror	r18
 46c:	82 0f       	add	r24, r18
 46e:	93 1f       	adc	r25, r19
 470:	88 0f       	add	r24, r24
 472:	89 2f       	mov	r24, r25
 474:	88 1f       	adc	r24, r24
 476:	99 0b       	sbc	r25, r25
 478:	91 95       	neg	r25
 47a:	18 9f       	mul	r17, r24
 47c:	90 01       	movw	r18, r0
 47e:	19 9f       	mul	r17, r25
 480:	30 0d       	add	r19, r0
 482:	11 24       	eor	r1, r1
 484:	fa 01       	movw	r30, r20
 486:	e2 1b       	sub	r30, r18
 488:	f3 0b       	sbc	r31, r19
 48a:	ee 0f       	add	r30, r30
 48c:	ff 1f       	adc	r31, r31
 48e:	e5 52       	subi	r30, 0x25	; 37
 490:	fd 4f       	sbci	r31, 0xFD	; 253
 492:	80 81       	ld	r24, Z
 494:	91 81       	ldd	r25, Z+1	; 0x01
 496:	70 d0       	rcall	.+224    	; 0x578 <sound_set_frequency>
 498:	40 91 a7 04 	lds	r20, 0x04A7	; 0x8004a7 <asdf>
			}
			
			m_duration_real = (m_duration[asdf%m_duration_size] * music_tempo);
 49c:	50 91 a8 04 	lds	r21, 0x04A8	; 0x8004a8 <asdf+0x1>
 4a0:	9a 01       	movw	r18, r20
 4a2:	a1 e4       	ldi	r26, 0x41	; 65
 4a4:	bb e2       	ldi	r27, 0x2B	; 43
 4a6:	f2 d1       	rcall	.+996    	; 0x88c <__umulhisi3>
 4a8:	28 1b       	sub	r18, r24
 4aa:	39 0b       	sbc	r19, r25
 4ac:	36 95       	lsr	r19
 4ae:	27 95       	ror	r18
 4b0:	82 0f       	add	r24, r18
 4b2:	93 1f       	adc	r25, r19
 4b4:	88 0f       	add	r24, r24
 4b6:	89 2f       	mov	r24, r25
 4b8:	88 1f       	adc	r24, r24
 4ba:	99 0b       	sbc	r25, r25
 4bc:	91 95       	neg	r25
 4be:	18 9f       	mul	r17, r24
 4c0:	90 01       	movw	r18, r0
 4c2:	19 9f       	mul	r17, r25
 4c4:	30 0d       	add	r19, r0
 4c6:	11 24       	eor	r1, r1
 4c8:	42 1b       	sub	r20, r18
 4ca:	53 0b       	sbc	r21, r19
 4cc:	fa 01       	movw	r30, r20
 4ce:	e0 50       	subi	r30, 0x00	; 0
 4d0:	fe 4f       	sbci	r31, 0xFE	; 254
 4d2:	80 81       	ld	r24, Z
 4d4:	60 91 91 04 	lds	r22, 0x0491	; 0x800491 <music_tempo>
			
			_delay_ms(m_duration_real);
 4d8:	86 9f       	mul	r24, r22
 4da:	b0 01       	movw	r22, r0
 4dc:	11 24       	eor	r1, r1
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	9f d0       	rcall	.+318    	; 0x622 <__floatunsisf>
 4e4:	2b 01       	movw	r4, r22
 4e6:	3c 01       	movw	r6, r24
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4ec:	4a e7       	ldi	r20, 0x7A	; 122
 4ee:	55 e4       	ldi	r21, 0x45	; 69
 4f0:	26 d1       	rcall	.+588    	; 0x73e <__mulsf3>
 4f2:	4b 01       	movw	r8, r22
 4f4:	5c 01       	movw	r10, r24
 4f6:	20 e0       	ldi	r18, 0x00	; 0
 4f8:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
 4fa:	40 e8       	ldi	r20, 0x80	; 128
 4fc:	5f e3       	ldi	r21, 0x3F	; 63
 4fe:	61 d0       	rcall	.+194    	; 0x5c2 <__cmpsf2>
 500:	88 23       	and	r24, r24
 502:	fc f0       	brlt	.+62     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	3f ef       	ldi	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
 508:	4f e7       	ldi	r20, 0x7F	; 127
 50a:	57 e4       	ldi	r21, 0x47	; 71
 50c:	c5 01       	movw	r24, r10
 50e:	b4 01       	movw	r22, r8
 510:	12 d1       	rcall	.+548    	; 0x736 <__gesf2>
 512:	18 16       	cp	r1, r24
 514:	94 f4       	brge	.+36     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 516:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	40 e2       	ldi	r20, 0x20	; 32
 51c:	51 e4       	ldi	r21, 0x41	; 65
 51e:	c3 01       	movw	r24, r6
 520:	b2 01       	movw	r22, r4
 522:	0d d1       	rcall	.+538    	; 0x73e <__mulsf3>
 524:	52 d0       	rcall	.+164    	; 0x5ca <__fixunssfsi>
 526:	61 15       	cp	r22, r1
 528:	71 05       	cpc	r23, r1
		while(__ticks)
 52a:	81 f0       	breq	.+32     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 52c:	ce 01       	movw	r24, r28
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 532:	61 50       	subi	r22, 0x01	; 1
 534:	71 09       	sbc	r23, r1
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 536:	d1 f7       	brne	.-12     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 538:	09 c0       	rjmp	.+18     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 53a:	c5 01       	movw	r24, r10
 53c:	b4 01       	movw	r22, r8
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 53e:	45 d0       	rcall	.+138    	; 0x5ca <__fixunssfsi>
 540:	02 c0       	rjmp	.+4      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 542:	6f 2d       	mov	r22, r15
 544:	70 2f       	mov	r23, r16

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 546:	cb 01       	movw	r24, r22
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 54c:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <asdf>

			asdf++;
 550:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <asdf+0x1>
 554:	01 96       	adiw	r24, 0x01	; 1
 556:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <asdf+0x1>
 55a:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <asdf>
 55e:	01 c0       	rjmp	.+2      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 560:	25 d0       	rcall	.+74     	; 0x5ac <sound_mute>
		}
		else
		{
			sound_mute();
 562:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <__data_end>
		}
		if (SW2_hit>=2 && !(SW2_hit%2))
 566:	82 30       	cpi	r24, 0x02	; 2
 568:	08 f4       	brcc	.+2      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 56a:	4b cf       	rjmp	.-362    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 56c:	80 fd       	sbrc	r24, 0
 56e:	49 cf       	rjmp	.-366    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	90 e0       	ldi	r25, 0x00	; 0
		{
			fnd_write_numbers(0);
 574:	e9 dd       	rcall	.-1070   	; 0x148 <fnd_write_numbers>
 576:	45 cf       	rjmp	.-374    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>

00000578 <sound_set_frequency>:


void sound_set_frequency(uint16_t freq_hz)
{
	//OCR3A 값 설정
	OCR3A = (F_CPU/(2*8*freq_hz))-1;
 578:	82 95       	swap	r24
 57a:	92 95       	swap	r25
 57c:	90 7f       	andi	r25, 0xF0	; 240
 57e:	98 27       	eor	r25, r24
 580:	80 7f       	andi	r24, 0xF0	; 240
 582:	98 27       	eor	r25, r24
 584:	9c 01       	movw	r18, r24
 586:	40 e0       	ldi	r20, 0x00	; 0
 588:	50 e0       	ldi	r21, 0x00	; 0
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	74 e2       	ldi	r23, 0x24	; 36
 58e:	84 ef       	ldi	r24, 0xF4	; 244
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	60 d1       	rcall	.+704    	; 0x854 <__divmodsi4>
 594:	21 50       	subi	r18, 0x01	; 1
 596:	31 09       	sbc	r19, r1
 598:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 59c:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	//Timer3의 prescaler 설정
	TCCR3B |= _BV(CS31);
 5a0:	e1 e9       	ldi	r30, 0x91	; 145
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	80 81       	ld	r24, Z
 5a6:	82 60       	ori	r24, 0x02	; 2
 5a8:	80 83       	st	Z, r24
 5aa:	08 95       	ret

000005ac <sound_mute>:
}

void sound_mute(void)
{
	TCCR3B &= ~(_BV(CS32)| _BV(CS31) | _BV(CS30));
 5ac:	e1 e9       	ldi	r30, 0x91	; 145
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	88 7f       	andi	r24, 0xF8	; 248
 5b4:	80 83       	st	Z, r24
	if(PINE & _BV(SOUND_OUT))
 5b6:	63 9b       	sbis	0x0c, 3	; 12
 5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <sound_mute+0x14>
	{
		TCCR3C = _BV(FOC3A);	
 5ba:	80 e8       	ldi	r24, 0x80	; 128
 5bc:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
 5c0:	08 95       	ret

000005c2 <__cmpsf2>:
 5c2:	6c d0       	rcall	.+216    	; 0x69c <__fp_cmp>
 5c4:	08 f4       	brcc	.+2      	; 0x5c8 <__cmpsf2+0x6>
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	08 95       	ret

000005ca <__fixunssfsi>:
 5ca:	94 d0       	rcall	.+296    	; 0x6f4 <__fp_splitA>
 5cc:	88 f0       	brcs	.+34     	; 0x5f0 <__fixunssfsi+0x26>
 5ce:	9f 57       	subi	r25, 0x7F	; 127
 5d0:	90 f0       	brcs	.+36     	; 0x5f6 <__fixunssfsi+0x2c>
 5d2:	b9 2f       	mov	r27, r25
 5d4:	99 27       	eor	r25, r25
 5d6:	b7 51       	subi	r27, 0x17	; 23
 5d8:	a0 f0       	brcs	.+40     	; 0x602 <__fixunssfsi+0x38>
 5da:	d1 f0       	breq	.+52     	; 0x610 <__fixunssfsi+0x46>
 5dc:	66 0f       	add	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	88 1f       	adc	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	1a f0       	brmi	.+6      	; 0x5ec <__fixunssfsi+0x22>
 5e6:	ba 95       	dec	r27
 5e8:	c9 f7       	brne	.-14     	; 0x5dc <__fixunssfsi+0x12>
 5ea:	12 c0       	rjmp	.+36     	; 0x610 <__fixunssfsi+0x46>
 5ec:	b1 30       	cpi	r27, 0x01	; 1
 5ee:	81 f0       	breq	.+32     	; 0x610 <__fixunssfsi+0x46>
 5f0:	9b d0       	rcall	.+310    	; 0x728 <__fp_zero>
 5f2:	b1 e0       	ldi	r27, 0x01	; 1
 5f4:	08 95       	ret
 5f6:	98 c0       	rjmp	.+304    	; 0x728 <__fp_zero>
 5f8:	67 2f       	mov	r22, r23
 5fa:	78 2f       	mov	r23, r24
 5fc:	88 27       	eor	r24, r24
 5fe:	b8 5f       	subi	r27, 0xF8	; 248
 600:	39 f0       	breq	.+14     	; 0x610 <__fixunssfsi+0x46>
 602:	b9 3f       	cpi	r27, 0xF9	; 249
 604:	cc f3       	brlt	.-14     	; 0x5f8 <__fixunssfsi+0x2e>
 606:	86 95       	lsr	r24
 608:	77 95       	ror	r23
 60a:	67 95       	ror	r22
 60c:	b3 95       	inc	r27
 60e:	d9 f7       	brne	.-10     	; 0x606 <__fixunssfsi+0x3c>
 610:	3e f4       	brtc	.+14     	; 0x620 <__fixunssfsi+0x56>
 612:	90 95       	com	r25
 614:	80 95       	com	r24
 616:	70 95       	com	r23
 618:	61 95       	neg	r22
 61a:	7f 4f       	sbci	r23, 0xFF	; 255
 61c:	8f 4f       	sbci	r24, 0xFF	; 255
 61e:	9f 4f       	sbci	r25, 0xFF	; 255
 620:	08 95       	ret

00000622 <__floatunsisf>:
 622:	e8 94       	clt
 624:	09 c0       	rjmp	.+18     	; 0x638 <__floatsisf+0x12>

00000626 <__floatsisf>:
 626:	97 fb       	bst	r25, 7
 628:	3e f4       	brtc	.+14     	; 0x638 <__floatsisf+0x12>
 62a:	90 95       	com	r25
 62c:	80 95       	com	r24
 62e:	70 95       	com	r23
 630:	61 95       	neg	r22
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	8f 4f       	sbci	r24, 0xFF	; 255
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	99 23       	and	r25, r25
 63a:	a9 f0       	breq	.+42     	; 0x666 <__floatsisf+0x40>
 63c:	f9 2f       	mov	r31, r25
 63e:	96 e9       	ldi	r25, 0x96	; 150
 640:	bb 27       	eor	r27, r27
 642:	93 95       	inc	r25
 644:	f6 95       	lsr	r31
 646:	87 95       	ror	r24
 648:	77 95       	ror	r23
 64a:	67 95       	ror	r22
 64c:	b7 95       	ror	r27
 64e:	f1 11       	cpse	r31, r1
 650:	f8 cf       	rjmp	.-16     	; 0x642 <__floatsisf+0x1c>
 652:	fa f4       	brpl	.+62     	; 0x692 <__floatsisf+0x6c>
 654:	bb 0f       	add	r27, r27
 656:	11 f4       	brne	.+4      	; 0x65c <__floatsisf+0x36>
 658:	60 ff       	sbrs	r22, 0
 65a:	1b c0       	rjmp	.+54     	; 0x692 <__floatsisf+0x6c>
 65c:	6f 5f       	subi	r22, 0xFF	; 255
 65e:	7f 4f       	sbci	r23, 0xFF	; 255
 660:	8f 4f       	sbci	r24, 0xFF	; 255
 662:	9f 4f       	sbci	r25, 0xFF	; 255
 664:	16 c0       	rjmp	.+44     	; 0x692 <__floatsisf+0x6c>
 666:	88 23       	and	r24, r24
 668:	11 f0       	breq	.+4      	; 0x66e <__floatsisf+0x48>
 66a:	96 e9       	ldi	r25, 0x96	; 150
 66c:	11 c0       	rjmp	.+34     	; 0x690 <__floatsisf+0x6a>
 66e:	77 23       	and	r23, r23
 670:	21 f0       	breq	.+8      	; 0x67a <__floatsisf+0x54>
 672:	9e e8       	ldi	r25, 0x8E	; 142
 674:	87 2f       	mov	r24, r23
 676:	76 2f       	mov	r23, r22
 678:	05 c0       	rjmp	.+10     	; 0x684 <__floatsisf+0x5e>
 67a:	66 23       	and	r22, r22
 67c:	71 f0       	breq	.+28     	; 0x69a <__floatsisf+0x74>
 67e:	96 e8       	ldi	r25, 0x86	; 134
 680:	86 2f       	mov	r24, r22
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	2a f0       	brmi	.+10     	; 0x692 <__floatsisf+0x6c>
 688:	9a 95       	dec	r25
 68a:	66 0f       	add	r22, r22
 68c:	77 1f       	adc	r23, r23
 68e:	88 1f       	adc	r24, r24
 690:	da f7       	brpl	.-10     	; 0x688 <__floatsisf+0x62>
 692:	88 0f       	add	r24, r24
 694:	96 95       	lsr	r25
 696:	87 95       	ror	r24
 698:	97 f9       	bld	r25, 7
 69a:	08 95       	ret

0000069c <__fp_cmp>:
 69c:	99 0f       	add	r25, r25
 69e:	00 08       	sbc	r0, r0
 6a0:	55 0f       	add	r21, r21
 6a2:	aa 0b       	sbc	r26, r26
 6a4:	e0 e8       	ldi	r30, 0x80	; 128
 6a6:	fe ef       	ldi	r31, 0xFE	; 254
 6a8:	16 16       	cp	r1, r22
 6aa:	17 06       	cpc	r1, r23
 6ac:	e8 07       	cpc	r30, r24
 6ae:	f9 07       	cpc	r31, r25
 6b0:	c0 f0       	brcs	.+48     	; 0x6e2 <__fp_cmp+0x46>
 6b2:	12 16       	cp	r1, r18
 6b4:	13 06       	cpc	r1, r19
 6b6:	e4 07       	cpc	r30, r20
 6b8:	f5 07       	cpc	r31, r21
 6ba:	98 f0       	brcs	.+38     	; 0x6e2 <__fp_cmp+0x46>
 6bc:	62 1b       	sub	r22, r18
 6be:	73 0b       	sbc	r23, r19
 6c0:	84 0b       	sbc	r24, r20
 6c2:	95 0b       	sbc	r25, r21
 6c4:	39 f4       	brne	.+14     	; 0x6d4 <__fp_cmp+0x38>
 6c6:	0a 26       	eor	r0, r26
 6c8:	61 f0       	breq	.+24     	; 0x6e2 <__fp_cmp+0x46>
 6ca:	23 2b       	or	r18, r19
 6cc:	24 2b       	or	r18, r20
 6ce:	25 2b       	or	r18, r21
 6d0:	21 f4       	brne	.+8      	; 0x6da <__fp_cmp+0x3e>
 6d2:	08 95       	ret
 6d4:	0a 26       	eor	r0, r26
 6d6:	09 f4       	brne	.+2      	; 0x6da <__fp_cmp+0x3e>
 6d8:	a1 40       	sbci	r26, 0x01	; 1
 6da:	a6 95       	lsr	r26
 6dc:	8f ef       	ldi	r24, 0xFF	; 255
 6de:	81 1d       	adc	r24, r1
 6e0:	81 1d       	adc	r24, r1
 6e2:	08 95       	ret

000006e4 <__fp_split3>:
 6e4:	57 fd       	sbrc	r21, 7
 6e6:	90 58       	subi	r25, 0x80	; 128
 6e8:	44 0f       	add	r20, r20
 6ea:	55 1f       	adc	r21, r21
 6ec:	59 f0       	breq	.+22     	; 0x704 <__fp_splitA+0x10>
 6ee:	5f 3f       	cpi	r21, 0xFF	; 255
 6f0:	71 f0       	breq	.+28     	; 0x70e <__fp_splitA+0x1a>
 6f2:	47 95       	ror	r20

000006f4 <__fp_splitA>:
 6f4:	88 0f       	add	r24, r24
 6f6:	97 fb       	bst	r25, 7
 6f8:	99 1f       	adc	r25, r25
 6fa:	61 f0       	breq	.+24     	; 0x714 <__fp_splitA+0x20>
 6fc:	9f 3f       	cpi	r25, 0xFF	; 255
 6fe:	79 f0       	breq	.+30     	; 0x71e <__fp_splitA+0x2a>
 700:	87 95       	ror	r24
 702:	08 95       	ret
 704:	12 16       	cp	r1, r18
 706:	13 06       	cpc	r1, r19
 708:	14 06       	cpc	r1, r20
 70a:	55 1f       	adc	r21, r21
 70c:	f2 cf       	rjmp	.-28     	; 0x6f2 <__fp_split3+0xe>
 70e:	46 95       	lsr	r20
 710:	f1 df       	rcall	.-30     	; 0x6f4 <__fp_splitA>
 712:	08 c0       	rjmp	.+16     	; 0x724 <__fp_splitA+0x30>
 714:	16 16       	cp	r1, r22
 716:	17 06       	cpc	r1, r23
 718:	18 06       	cpc	r1, r24
 71a:	99 1f       	adc	r25, r25
 71c:	f1 cf       	rjmp	.-30     	; 0x700 <__fp_splitA+0xc>
 71e:	86 95       	lsr	r24
 720:	71 05       	cpc	r23, r1
 722:	61 05       	cpc	r22, r1
 724:	08 94       	sec
 726:	08 95       	ret

00000728 <__fp_zero>:
 728:	e8 94       	clt

0000072a <__fp_szero>:
 72a:	bb 27       	eor	r27, r27
 72c:	66 27       	eor	r22, r22
 72e:	77 27       	eor	r23, r23
 730:	cb 01       	movw	r24, r22
 732:	97 f9       	bld	r25, 7
 734:	08 95       	ret

00000736 <__gesf2>:
 736:	b2 df       	rcall	.-156    	; 0x69c <__fp_cmp>
 738:	08 f4       	brcc	.+2      	; 0x73c <__gesf2+0x6>
 73a:	8f ef       	ldi	r24, 0xFF	; 255
 73c:	08 95       	ret

0000073e <__mulsf3>:
 73e:	0b d0       	rcall	.+22     	; 0x756 <__mulsf3x>
 740:	78 c0       	rjmp	.+240    	; 0x832 <__fp_round>
 742:	69 d0       	rcall	.+210    	; 0x816 <__fp_pscA>
 744:	28 f0       	brcs	.+10     	; 0x750 <__mulsf3+0x12>
 746:	6e d0       	rcall	.+220    	; 0x824 <__fp_pscB>
 748:	18 f0       	brcs	.+6      	; 0x750 <__mulsf3+0x12>
 74a:	95 23       	and	r25, r21
 74c:	09 f0       	breq	.+2      	; 0x750 <__mulsf3+0x12>
 74e:	5a c0       	rjmp	.+180    	; 0x804 <__fp_inf>
 750:	5f c0       	rjmp	.+190    	; 0x810 <__fp_nan>
 752:	11 24       	eor	r1, r1
 754:	ea cf       	rjmp	.-44     	; 0x72a <__fp_szero>

00000756 <__mulsf3x>:
 756:	c6 df       	rcall	.-116    	; 0x6e4 <__fp_split3>
 758:	a0 f3       	brcs	.-24     	; 0x742 <__mulsf3+0x4>

0000075a <__mulsf3_pse>:
 75a:	95 9f       	mul	r25, r21
 75c:	d1 f3       	breq	.-12     	; 0x752 <__mulsf3+0x14>
 75e:	95 0f       	add	r25, r21
 760:	50 e0       	ldi	r21, 0x00	; 0
 762:	55 1f       	adc	r21, r21
 764:	62 9f       	mul	r22, r18
 766:	f0 01       	movw	r30, r0
 768:	72 9f       	mul	r23, r18
 76a:	bb 27       	eor	r27, r27
 76c:	f0 0d       	add	r31, r0
 76e:	b1 1d       	adc	r27, r1
 770:	63 9f       	mul	r22, r19
 772:	aa 27       	eor	r26, r26
 774:	f0 0d       	add	r31, r0
 776:	b1 1d       	adc	r27, r1
 778:	aa 1f       	adc	r26, r26
 77a:	64 9f       	mul	r22, r20
 77c:	66 27       	eor	r22, r22
 77e:	b0 0d       	add	r27, r0
 780:	a1 1d       	adc	r26, r1
 782:	66 1f       	adc	r22, r22
 784:	82 9f       	mul	r24, r18
 786:	22 27       	eor	r18, r18
 788:	b0 0d       	add	r27, r0
 78a:	a1 1d       	adc	r26, r1
 78c:	62 1f       	adc	r22, r18
 78e:	73 9f       	mul	r23, r19
 790:	b0 0d       	add	r27, r0
 792:	a1 1d       	adc	r26, r1
 794:	62 1f       	adc	r22, r18
 796:	83 9f       	mul	r24, r19
 798:	a0 0d       	add	r26, r0
 79a:	61 1d       	adc	r22, r1
 79c:	22 1f       	adc	r18, r18
 79e:	74 9f       	mul	r23, r20
 7a0:	33 27       	eor	r19, r19
 7a2:	a0 0d       	add	r26, r0
 7a4:	61 1d       	adc	r22, r1
 7a6:	23 1f       	adc	r18, r19
 7a8:	84 9f       	mul	r24, r20
 7aa:	60 0d       	add	r22, r0
 7ac:	21 1d       	adc	r18, r1
 7ae:	82 2f       	mov	r24, r18
 7b0:	76 2f       	mov	r23, r22
 7b2:	6a 2f       	mov	r22, r26
 7b4:	11 24       	eor	r1, r1
 7b6:	9f 57       	subi	r25, 0x7F	; 127
 7b8:	50 40       	sbci	r21, 0x00	; 0
 7ba:	8a f0       	brmi	.+34     	; 0x7de <__mulsf3_pse+0x84>
 7bc:	e1 f0       	breq	.+56     	; 0x7f6 <__mulsf3_pse+0x9c>
 7be:	88 23       	and	r24, r24
 7c0:	4a f0       	brmi	.+18     	; 0x7d4 <__mulsf3_pse+0x7a>
 7c2:	ee 0f       	add	r30, r30
 7c4:	ff 1f       	adc	r31, r31
 7c6:	bb 1f       	adc	r27, r27
 7c8:	66 1f       	adc	r22, r22
 7ca:	77 1f       	adc	r23, r23
 7cc:	88 1f       	adc	r24, r24
 7ce:	91 50       	subi	r25, 0x01	; 1
 7d0:	50 40       	sbci	r21, 0x00	; 0
 7d2:	a9 f7       	brne	.-22     	; 0x7be <__mulsf3_pse+0x64>
 7d4:	9e 3f       	cpi	r25, 0xFE	; 254
 7d6:	51 05       	cpc	r21, r1
 7d8:	70 f0       	brcs	.+28     	; 0x7f6 <__mulsf3_pse+0x9c>
 7da:	14 c0       	rjmp	.+40     	; 0x804 <__fp_inf>
 7dc:	a6 cf       	rjmp	.-180    	; 0x72a <__fp_szero>
 7de:	5f 3f       	cpi	r21, 0xFF	; 255
 7e0:	ec f3       	brlt	.-6      	; 0x7dc <__mulsf3_pse+0x82>
 7e2:	98 3e       	cpi	r25, 0xE8	; 232
 7e4:	dc f3       	brlt	.-10     	; 0x7dc <__mulsf3_pse+0x82>
 7e6:	86 95       	lsr	r24
 7e8:	77 95       	ror	r23
 7ea:	67 95       	ror	r22
 7ec:	b7 95       	ror	r27
 7ee:	f7 95       	ror	r31
 7f0:	e7 95       	ror	r30
 7f2:	9f 5f       	subi	r25, 0xFF	; 255
 7f4:	c1 f7       	brne	.-16     	; 0x7e6 <__mulsf3_pse+0x8c>
 7f6:	fe 2b       	or	r31, r30
 7f8:	88 0f       	add	r24, r24
 7fa:	91 1d       	adc	r25, r1
 7fc:	96 95       	lsr	r25
 7fe:	87 95       	ror	r24
 800:	97 f9       	bld	r25, 7
 802:	08 95       	ret

00000804 <__fp_inf>:
 804:	97 f9       	bld	r25, 7
 806:	9f 67       	ori	r25, 0x7F	; 127
 808:	80 e8       	ldi	r24, 0x80	; 128
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	08 95       	ret

00000810 <__fp_nan>:
 810:	9f ef       	ldi	r25, 0xFF	; 255
 812:	80 ec       	ldi	r24, 0xC0	; 192
 814:	08 95       	ret

00000816 <__fp_pscA>:
 816:	00 24       	eor	r0, r0
 818:	0a 94       	dec	r0
 81a:	16 16       	cp	r1, r22
 81c:	17 06       	cpc	r1, r23
 81e:	18 06       	cpc	r1, r24
 820:	09 06       	cpc	r0, r25
 822:	08 95       	ret

00000824 <__fp_pscB>:
 824:	00 24       	eor	r0, r0
 826:	0a 94       	dec	r0
 828:	12 16       	cp	r1, r18
 82a:	13 06       	cpc	r1, r19
 82c:	14 06       	cpc	r1, r20
 82e:	05 06       	cpc	r0, r21
 830:	08 95       	ret

00000832 <__fp_round>:
 832:	09 2e       	mov	r0, r25
 834:	03 94       	inc	r0
 836:	00 0c       	add	r0, r0
 838:	11 f4       	brne	.+4      	; 0x83e <__fp_round+0xc>
 83a:	88 23       	and	r24, r24
 83c:	52 f0       	brmi	.+20     	; 0x852 <__fp_round+0x20>
 83e:	bb 0f       	add	r27, r27
 840:	40 f4       	brcc	.+16     	; 0x852 <__fp_round+0x20>
 842:	bf 2b       	or	r27, r31
 844:	11 f4       	brne	.+4      	; 0x84a <__fp_round+0x18>
 846:	60 ff       	sbrs	r22, 0
 848:	04 c0       	rjmp	.+8      	; 0x852 <__fp_round+0x20>
 84a:	6f 5f       	subi	r22, 0xFF	; 255
 84c:	7f 4f       	sbci	r23, 0xFF	; 255
 84e:	8f 4f       	sbci	r24, 0xFF	; 255
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	08 95       	ret

00000854 <__divmodsi4>:
 854:	05 2e       	mov	r0, r21
 856:	97 fb       	bst	r25, 7
 858:	16 f4       	brtc	.+4      	; 0x85e <__divmodsi4+0xa>
 85a:	00 94       	com	r0
 85c:	0f d0       	rcall	.+30     	; 0x87c <__negsi2>
 85e:	57 fd       	sbrc	r21, 7
 860:	05 d0       	rcall	.+10     	; 0x86c <__divmodsi4_neg2>
 862:	23 d0       	rcall	.+70     	; 0x8aa <__udivmodsi4>
 864:	07 fc       	sbrc	r0, 7
 866:	02 d0       	rcall	.+4      	; 0x86c <__divmodsi4_neg2>
 868:	46 f4       	brtc	.+16     	; 0x87a <__divmodsi4_exit>
 86a:	08 c0       	rjmp	.+16     	; 0x87c <__negsi2>

0000086c <__divmodsi4_neg2>:
 86c:	50 95       	com	r21
 86e:	40 95       	com	r20
 870:	30 95       	com	r19
 872:	21 95       	neg	r18
 874:	3f 4f       	sbci	r19, 0xFF	; 255
 876:	4f 4f       	sbci	r20, 0xFF	; 255
 878:	5f 4f       	sbci	r21, 0xFF	; 255

0000087a <__divmodsi4_exit>:
 87a:	08 95       	ret

0000087c <__negsi2>:
 87c:	90 95       	com	r25
 87e:	80 95       	com	r24
 880:	70 95       	com	r23
 882:	61 95       	neg	r22
 884:	7f 4f       	sbci	r23, 0xFF	; 255
 886:	8f 4f       	sbci	r24, 0xFF	; 255
 888:	9f 4f       	sbci	r25, 0xFF	; 255
 88a:	08 95       	ret

0000088c <__umulhisi3>:
 88c:	a2 9f       	mul	r26, r18
 88e:	b0 01       	movw	r22, r0
 890:	b3 9f       	mul	r27, r19
 892:	c0 01       	movw	r24, r0
 894:	a3 9f       	mul	r26, r19
 896:	70 0d       	add	r23, r0
 898:	81 1d       	adc	r24, r1
 89a:	11 24       	eor	r1, r1
 89c:	91 1d       	adc	r25, r1
 89e:	b2 9f       	mul	r27, r18
 8a0:	70 0d       	add	r23, r0
 8a2:	81 1d       	adc	r24, r1
 8a4:	11 24       	eor	r1, r1
 8a6:	91 1d       	adc	r25, r1
 8a8:	08 95       	ret

000008aa <__udivmodsi4>:
 8aa:	a1 e2       	ldi	r26, 0x21	; 33
 8ac:	1a 2e       	mov	r1, r26
 8ae:	aa 1b       	sub	r26, r26
 8b0:	bb 1b       	sub	r27, r27
 8b2:	fd 01       	movw	r30, r26
 8b4:	0d c0       	rjmp	.+26     	; 0x8d0 <__udivmodsi4_ep>

000008b6 <__udivmodsi4_loop>:
 8b6:	aa 1f       	adc	r26, r26
 8b8:	bb 1f       	adc	r27, r27
 8ba:	ee 1f       	adc	r30, r30
 8bc:	ff 1f       	adc	r31, r31
 8be:	a2 17       	cp	r26, r18
 8c0:	b3 07       	cpc	r27, r19
 8c2:	e4 07       	cpc	r30, r20
 8c4:	f5 07       	cpc	r31, r21
 8c6:	20 f0       	brcs	.+8      	; 0x8d0 <__udivmodsi4_ep>
 8c8:	a2 1b       	sub	r26, r18
 8ca:	b3 0b       	sbc	r27, r19
 8cc:	e4 0b       	sbc	r30, r20
 8ce:	f5 0b       	sbc	r31, r21

000008d0 <__udivmodsi4_ep>:
 8d0:	66 1f       	adc	r22, r22
 8d2:	77 1f       	adc	r23, r23
 8d4:	88 1f       	adc	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	1a 94       	dec	r1
 8da:	69 f7       	brne	.-38     	; 0x8b6 <__udivmodsi4_loop>
 8dc:	60 95       	com	r22
 8de:	70 95       	com	r23
 8e0:	80 95       	com	r24
 8e2:	90 95       	com	r25
 8e4:	9b 01       	movw	r18, r22
 8e6:	ac 01       	movw	r20, r24
 8e8:	bd 01       	movw	r22, r26
 8ea:	cf 01       	movw	r24, r30
 8ec:	08 95       	ret

000008ee <_exit>:
 8ee:	f8 94       	cli

000008f0 <__stop_program>:
 8f0:	ff cf       	rjmp	.-2      	; 0x8f0 <__stop_program>
