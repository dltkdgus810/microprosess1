
PCINT_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  000003c0  00000454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800218  00800218  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000103c  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c67  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000589  00000000  00000000  00002207  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e9  00000000  00000000  000028d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000359  00000000  00000000  00002ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00003216  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__bad_interrupt>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	00 00       	nop
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	00 00       	nop
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	72 c0       	rjmp	.+228    	; 0x106 <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c1       	rjmp	.+616    	; 0x28e <__vector_9>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	50 c0       	rjmp	.+160    	; 0x106 <__bad_interrupt>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3c c0       	rjmp	.+120    	; 0x106 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3a c0       	rjmp	.+116    	; 0x106 <__bad_interrupt>
  92:	00 00       	nop
  94:	38 c0       	rjmp	.+112    	; 0x106 <__bad_interrupt>
  96:	00 00       	nop
  98:	36 c0       	rjmp	.+108    	; 0x106 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	34 c0       	rjmp	.+104    	; 0x106 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	32 c0       	rjmp	.+100    	; 0x106 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	30 c0       	rjmp	.+96     	; 0x106 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2e c0       	rjmp	.+92     	; 0x106 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2c c0       	rjmp	.+88     	; 0x106 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2a c0       	rjmp	.+84     	; 0x106 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	28 c0       	rjmp	.+80     	; 0x106 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	26 c0       	rjmp	.+76     	; 0x106 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	24 c0       	rjmp	.+72     	; 0x106 <__bad_interrupt>
  be:	00 00       	nop
  c0:	22 c0       	rjmp	.+68     	; 0x106 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	20 c0       	rjmp	.+64     	; 0x106 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1e c0       	rjmp	.+60     	; 0x106 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	e0 ec       	ldi	r30, 0xC0	; 192
  e0:	f3 e0       	ldi	r31, 0x03	; 3
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a8 31       	cpi	r26, 0x18	; 24
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	a8 e1       	ldi	r26, 0x18	; 24
  f6:	b2 e0       	ldi	r27, 0x02	; 2
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	aa 31       	cpi	r26, 0x1A	; 26
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	18 d1       	rcall	.+560    	; 0x334 <main>
 104:	5b c1       	rjmp	.+694    	; 0x3bc <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <fnd_write>:
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline void fnd_clear(uint8_t fnd_num)
{
    fnd_write(fnd_num, 0);
 108:	9f b7       	in	r25, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	84 bb       	out	0x14, r24	; 20
 10e:	68 b9       	out	0x08, r22	; 8
 110:	87 e0       	ldi	r24, 0x07	; 7
 112:	84 bb       	out	0x14, r24	; 20
 114:	99 23       	and	r25, r25
 116:	0c f4       	brge	.+2      	; 0x11a <fnd_write+0x12>
 118:	78 94       	sei
 11a:	08 95       	ret

0000011c <fnd_clear_all>:
/* ----------------------------------------------------------------------------
 * clear all FNDs 
 * -------------------------------------------------------------------------- */
void fnd_clear_all(void)
{
    fnd_write(0, 0);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	f3 df       	rcall	.-26     	; 0x108 <fnd_write>
    fnd_write(1, 0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	f0 df       	rcall	.-32     	; 0x108 <fnd_write>
    fnd_write(2, 0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	ed cf       	rjmp	.-38     	; 0x108 <fnd_write>
 12e:	08 95       	ret

00000130 <fnd_write_number>:
{
    static uint8_t num_code[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x6f,
                                  0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71};
    uint8_t value;
    
    value = num_code[num] | (dot_on<<7);
 130:	e6 2f       	mov	r30, r22
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	e8 5f       	subi	r30, 0xF8	; 248
 136:	fd 4f       	sbci	r31, 0xFD	; 253
    fnd_write(fnd_num, value);    
 138:	90 e8       	ldi	r25, 0x80	; 128
 13a:	49 9f       	mul	r20, r25
 13c:	a0 01       	movw	r20, r0
 13e:	11 24       	eor	r1, r1
 140:	60 81       	ld	r22, Z
 142:	64 2b       	or	r22, r20
 144:	e1 cf       	rjmp	.-62     	; 0x108 <fnd_write>
 146:	08 95       	ret

00000148 <fnd_write_numbers>:
}

void fnd_write_numbers(uint16_t num)
{
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	8c 01       	movw	r16, r24
	uint16_t a = num%10;
 152:	9c 01       	movw	r18, r24
 154:	ad ec       	ldi	r26, 0xCD	; 205
 156:	bc ec       	ldi	r27, 0xCC	; 204
 158:	22 d1       	rcall	.+580    	; 0x39e <__umulhisi3>
 15a:	fc 01       	movw	r30, r24
 15c:	f6 95       	lsr	r31
 15e:	e7 95       	ror	r30
 160:	f6 95       	lsr	r31
 162:	e7 95       	ror	r30
 164:	f6 95       	lsr	r31
 166:	e7 95       	ror	r30
 168:	cf 01       	movw	r24, r30
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e8 0f       	add	r30, r24
 17c:	f9 1f       	adc	r31, r25
 17e:	c8 01       	movw	r24, r16
 180:	8e 1b       	sub	r24, r30
 182:	9f 0b       	sbc	r25, r31
 184:	fc 01       	movw	r30, r24
	uint16_t b = (num/10)%10;
 186:	0b d1       	rcall	.+534    	; 0x39e <__umulhisi3>
 188:	ac 01       	movw	r20, r24
 18a:	56 95       	lsr	r21
 18c:	47 95       	ror	r20
 18e:	56 95       	lsr	r21
 190:	47 95       	ror	r20
 192:	56 95       	lsr	r21
 194:	47 95       	ror	r20
 196:	9a 01       	movw	r18, r20
 198:	02 d1       	rcall	.+516    	; 0x39e <__umulhisi3>
 19a:	ec 01       	movw	r28, r24
 19c:	d6 95       	lsr	r29
 19e:	c7 95       	ror	r28
 1a0:	d6 95       	lsr	r29
 1a2:	c7 95       	ror	r28
 1a4:	d6 95       	lsr	r29
 1a6:	c7 95       	ror	r28
 1a8:	ce 01       	movw	r24, r28
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	cc 0f       	add	r28, r28
 1b0:	dd 1f       	adc	r29, r29
 1b2:	cc 0f       	add	r28, r28
 1b4:	dd 1f       	adc	r29, r29
 1b6:	cc 0f       	add	r28, r28
 1b8:	dd 1f       	adc	r29, r29
 1ba:	c8 0f       	add	r28, r24
 1bc:	d9 1f       	adc	r29, r25
 1be:	ca 01       	movw	r24, r20
 1c0:	8c 1b       	sub	r24, r28
 1c2:	9d 0b       	sbc	r25, r29
 1c4:	ec 01       	movw	r28, r24
 1c6:	0a 30       	cpi	r16, 0x0A	; 10
	uint16_t c = (num/100)%10;
	
	if(num<10)
 1c8:	11 05       	cpc	r17, r1
 1ca:	58 f4       	brcc	.+22     	; 0x1e2 <fnd_write_numbers+0x9a>
 1cc:	40 e0       	ldi	r20, 0x00	; 0
	{
		fnd_write_number(0,a,0);
 1ce:	6e 2f       	mov	r22, r30
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	ae df       	rcall	.-164    	; 0x130 <fnd_write_number>
		fnd_write(1,0);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	97 df       	rcall	.-210    	; 0x108 <fnd_write>
		fnd_write(2,0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	94 df       	rcall	.-216    	; 0x108 <fnd_write>
 1e0:	3d c0       	rjmp	.+122    	; 0x25c <fnd_write_numbers+0x114>
 1e2:	04 36       	cpi	r16, 0x64	; 100
	}
	else if(num<100)
 1e4:	11 05       	cpc	r17, r1
 1e6:	60 f4       	brcc	.+24     	; 0x200 <fnd_write_numbers+0xb8>
	{
		fnd_write_number(0,a,0);
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	6e 2f       	mov	r22, r30
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	a0 df       	rcall	.-192    	; 0x130 <fnd_write_number>
		fnd_write_number(1,b,0);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	6c 2f       	mov	r22, r28
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	9c df       	rcall	.-200    	; 0x130 <fnd_write_number>
		fnd_write(2,0);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	85 df       	rcall	.-246    	; 0x108 <fnd_write>
 1fe:	2e c0       	rjmp	.+92     	; 0x25c <fnd_write_numbers+0x114>
	}
	else
	{
		fnd_write_number(0,a,0);
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	6e 2f       	mov	r22, r30
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	94 df       	rcall	.-216    	; 0x130 <fnd_write_number>
 208:	40 e0       	ldi	r20, 0x00	; 0
		fnd_write_number(1,b,0);
 20a:	6c 2f       	mov	r22, r28
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 df       	rcall	.-224    	; 0x130 <fnd_write_number>
 210:	98 01       	movw	r18, r16
		fnd_write_number(2,c,0);
 212:	36 95       	lsr	r19
 214:	27 95       	ror	r18
 216:	36 95       	lsr	r19
 218:	27 95       	ror	r18
 21a:	ab e7       	ldi	r26, 0x7B	; 123
 21c:	b4 e1       	ldi	r27, 0x14	; 20
 21e:	bf d0       	rcall	.+382    	; 0x39e <__umulhisi3>
 220:	ac 01       	movw	r20, r24
 222:	56 95       	lsr	r21
 224:	47 95       	ror	r20
 226:	9a 01       	movw	r18, r20
 228:	ad ec       	ldi	r26, 0xCD	; 205
 22a:	bc ec       	ldi	r27, 0xCC	; 204
 22c:	b8 d0       	rcall	.+368    	; 0x39e <__umulhisi3>
 22e:	96 95       	lsr	r25
 230:	87 95       	ror	r24
 232:	96 95       	lsr	r25
 234:	87 95       	ror	r24
 236:	96 95       	lsr	r25
 238:	87 95       	ror	r24
 23a:	9c 01       	movw	r18, r24
 23c:	22 0f       	add	r18, r18
 23e:	33 1f       	adc	r19, r19
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	82 0f       	add	r24, r18
 24e:	93 1f       	adc	r25, r19
 250:	ba 01       	movw	r22, r20
 252:	68 1b       	sub	r22, r24
 254:	79 0b       	sbc	r23, r25
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	6a df       	rcall	.-300    	; 0x130 <fnd_write_number>
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
	}
	
}
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	08 95       	ret

00000266 <led_write>:
 266:	9f b7       	in	r25, 0x3f	; 63
 268:	f8 94       	cli
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline static void fnd_select(uint8_t fnd_num)
{
    PORTG = fnd_num;
 26a:	23 e0       	ldi	r18, 0x03	; 3
 26c:	24 bb       	out	0x14, r18	; 20
    
    sreg = SREG;            // save SREG
    cli();                  // disable interrupt to prevent shared-data problem

    fnd_select(3);
    PORTC = value;
 26e:	88 b9       	out	0x08, r24	; 8
/* ----------------------------------------------------------------------------
 * deselect selected FND
 * -------------------------------------------------------------------------- */
inline static void fnd_deselect(void)
{
    PORTG = 0x07;
 270:	87 e0       	ldi	r24, 0x07	; 7
 272:	84 bb       	out	0x14, r24	; 20

    fnd_select(3);
    PORTC = value;
    fnd_deselect();

    if(sreg&0x80)           // if global interrupt was enabled before executing cli()
 274:	99 23       	and	r25, r25
 276:	0c f4       	brge	.+2      	; 0x27a <led_write+0x14>
        sei();              // enable interrupt        
 278:	78 94       	sei
 27a:	08 95       	ret

0000027c <fnd_init>:
 * initialize port for FND/LED interface
 * -------------------------------------------------------------------------- */
inline static void fnd_port_init(void)
{
    // configure output
    DDRC = 0xff;            // PORTC[7..0]
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	87 b9       	out	0x07, r24	; 7
    DDRG = 0x07;            // PORTG[2..0]
 280:	87 e0       	ldi	r24, 0x07	; 7
 282:	83 bb       	out	0x13, r24	; 19
    DDRB |= _BV(LED_COLOR);
 284:	24 9a       	sbi	0x04, 4	; 4
 * initialize FND/LED
 * -------------------------------------------------------------------------- */
void fnd_init(void)
{
    fnd_port_init();
    fnd_clear_all();
 286:	4a df       	rcall	.-364    	; 0x11c <fnd_clear_all>
    led_write(0xff);
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	ed cf       	rjmp	.-38     	; 0x266 <led_write>
 28c:	08 95       	ret

0000028e <__vector_9>:

void ioport_init(void);
void interrupt_init(void);

ISR(PCINT0_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	0b b6       	in	r0, 0x3b	; 59
 29a:	0f 92       	push	r0
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
	//sw3을 눌렀을 때 1증가
	if (!(PINB&_BV(PINB5)))
 2b4:	1d 99       	sbic	0x03, 5	; 3
 2b6:	09 c0       	rjmp	.+18     	; 0x2ca <__vector_9+0x3c>
	{
		fnd_num++;
 2b8:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
 2bc:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <__data_end+0x1>
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <__data_end+0x1>
 2c6:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
	}
	
	//999넘어가면 0으로 초기화
	if (fnd_num>999)
 2ca:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
 2ce:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <__data_end+0x1>
 2d2:	88 3e       	cpi	r24, 0xE8	; 232
 2d4:	93 40       	sbci	r25, 0x03	; 3
 2d6:	20 f0       	brcs	.+8      	; 0x2e0 <__vector_9+0x52>
	{
		fnd_num = 0;
 2d8:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <__data_end+0x1>
 2dc:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <__data_end>
	}
	fnd_write_numbers(fnd_num);
 2e0:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
 2e4:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <__data_end+0x1>
 2e8:	2f df       	rcall	.-418    	; 0x148 <fnd_write_numbers>
}
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	7f 91       	pop	r23
 2f8:	6f 91       	pop	r22
 2fa:	5f 91       	pop	r21
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	0b be       	out	0x3b, r0	; 59
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <ioport_init>:
}

void ioport_init(void)
{
	//DDRC의 하위 4bit을 출력하는 단자로 만든다.
	DDRC = _BV(LED1) | _BV(LED2) | _BV(LED3) | _BV(LED4);
 310:	8f e0       	ldi	r24, 0x0F	; 15
 312:	87 b9       	out	0x07, r24	; 7
	//MCU의 LED보드 4개의 불을 끈다.
	PORTC = 0xff;
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	88 b9       	out	0x08, r24	; 8
	//MCU 보드의 SW2의 내부 pull-up저항을 활성화 한다.
	PORTE = _BV(SW2);
 318:	80 e8       	ldi	r24, 0x80	; 128
 31a:	8e b9       	out	0x0e, r24	; 14
	//확장 보드의 SW3,4,5의 내부 pull-up저항을 활성화 한다.
	PORTD |= _BV(SW3) | _BV(SW4) |_BV(SW5);
 31c:	8b b1       	in	r24, 0x0b	; 11
 31e:	88 63       	ori	r24, 0x38	; 56
 320:	8b b9       	out	0x0b, r24	; 11
 322:	08 95       	ret

00000324 <interrupt_init>:
}

void interrupt_init(void)
{
	// PCINT5와 PCINT6을 PCINT 입력으로 사용하도록 PCMSK0 레지스터를 설정한다.
	PCMSK0 = _BV(PCINT5) | _BV(PCINT6);
 324:	80 e6       	ldi	r24, 0x60	; 96
 326:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	// PCINT5와 PCINT6을 사용한 PCINT를 enable시키도록 PCICR 레지스터를 설정한다.
	PCICR = _BV(PCIE0);
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	sei();
 330:	78 94       	sei
 332:	08 95       	ret

00000334 <main>:
	fnd_write_numbers(fnd_num);
}


int main(void)
{
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
 33c:	28 97       	sbiw	r28, 0x08	; 8
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	de bf       	out	0x3e, r29	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	cd bf       	out	0x3d, r28	; 61
	ioport_init();
 348:	e3 df       	rcall	.-58     	; 0x310 <ioport_init>
	interrupt_init();
 34a:	ec df       	rcall	.-40     	; 0x324 <interrupt_init>
	fnd_init();
 34c:	97 df       	rcall	.-210    	; 0x27c <fnd_init>
 34e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
	
	//fnd를 0으로 초기화 한다.
	fnd_write_numbers(fnd_num);
 352:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <__data_end+0x1>
 356:	f8 de       	rcall	.-528    	; 0x148 <fnd_write_numbers>
 358:	88 e0       	ldi	r24, 0x08	; 8
	uint16_t i = 0;
	//확장보드 LED패턴
	uint8_t led_pattern[8] = {0x81, 0xC3, 0xE7, 0xFF, 0x7E, 0x3C, 0x18, 0x00};
 35a:	e0 e0       	ldi	r30, 0x00	; 0
 35c:	f2 e0       	ldi	r31, 0x02	; 2
 35e:	de 01       	movw	r26, r28
 360:	11 96       	adiw	r26, 0x01	; 1
 362:	01 90       	ld	r0, Z+
 364:	0d 92       	st	X+, r0
 366:	8a 95       	dec	r24
 368:	e1 f7       	brne	.-8      	; 0x362 <main+0x2e>
 36a:	80 e0       	ldi	r24, 0x00	; 0
	interrupt_init();
	fnd_init();
	
	//fnd를 0으로 초기화 한다.
	fnd_write_numbers(fnd_num);
	uint16_t i = 0;
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	8c 01       	movw	r16, r24
	
	/* Replace with your application code */
	while (1)
	{
		//미리 만들어둔 확장보드 LED패턴으로 작동된다.
		led_write(led_pattern[i++%8]);
 370:	0f 5f       	subi	r16, 0xFF	; 255
 372:	1f 4f       	sbci	r17, 0xFF	; 255
 374:	87 70       	andi	r24, 0x07	; 7
 376:	99 27       	eor	r25, r25
 378:	e1 e0       	ldi	r30, 0x01	; 1
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	ec 0f       	add	r30, r28
 37e:	fd 1f       	adc	r31, r29
 380:	e8 0f       	add	r30, r24
 382:	f9 1f       	adc	r31, r25
 384:	80 81       	ld	r24, Z
 386:	6f df       	rcall	.-290    	; 0x266 <led_write>
 388:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38a:	84 e3       	ldi	r24, 0x34	; 52
 38c:	9c e0       	ldi	r25, 0x0C	; 12
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <main+0x5a>
 396:	00 c0       	rjmp	.+0      	; 0x398 <main+0x64>
 398:	00 00       	nop
 39a:	c8 01       	movw	r24, r16
 39c:	e8 cf       	rjmp	.-48     	; 0x36e <main+0x3a>

0000039e <__umulhisi3>:
 39e:	a2 9f       	mul	r26, r18
 3a0:	b0 01       	movw	r22, r0
 3a2:	b3 9f       	mul	r27, r19
 3a4:	c0 01       	movw	r24, r0
 3a6:	a3 9f       	mul	r26, r19
 3a8:	70 0d       	add	r23, r0
 3aa:	81 1d       	adc	r24, r1
 3ac:	11 24       	eor	r1, r1
 3ae:	91 1d       	adc	r25, r1
 3b0:	b2 9f       	mul	r27, r18
 3b2:	70 0d       	add	r23, r0
 3b4:	81 1d       	adc	r24, r1
 3b6:	11 24       	eor	r1, r1
 3b8:	91 1d       	adc	r25, r1
 3ba:	08 95       	ret

000003bc <_exit>:
 3bc:	f8 94       	cli

000003be <__stop_program>:
 3be:	ff cf       	rjmp	.-2      	; 0x3be <__stop_program>
